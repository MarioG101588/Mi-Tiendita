estilo.css

/* ===================================================
   CSS RESPONSIVO - SISTEMA POS EL ARRENDAJO AZUL
   ===================================================
   Optimizado para móviles y Firebase Hosting
   ================================================ */

/* ===========================================
   1. RESET Y CONFIGURACIÓN BASE
   ========================================== */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px;
    scroll-behavior: smooth;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    color: #333;
    line-height: 1.6;
    min-height: 100vh;
    padding: 8px;
}

/* ===========================================
   2. CONTENEDORES PRINCIPALES RESPONSIVOS
   ========================================== */
.container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    padding: 20px;
    margin: 10px auto;
    max-width: 100%;
    width: 100%;
}

.container1,
.container2, 
.container3,
.containerPendientes,
.containerResumenTurno {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    padding: 15px;
    margin: 10px auto;
    max-width: 100%;
    width: 100%;
    display: none;
}

/* Estados de display */
.d-none { display: none !important; }
.d-block { display: block !important; }
.d-flex { display: flex !important; }

/* ===========================================
   3. TÍTULOS Y TEXTOS RESPONSIVOS
   ========================================== */
h1, .titulo-superior {
    text-align: center;
    margin-bottom: 20px;
    color: #2c3e50;
    font-size: 1.5rem;
    font-weight: 600;
}

h2 {
    font-size: 1.25rem;
    color: #34495e;
    margin-bottom: 15px;
}

/* ===========================================
   4. SISTEMA DE BOTONES RESPONSIVO
   ========================================== */
button, .btn {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
    margin: 5px 2px;
    min-height: 44px; /* Accesibilidad móvil */
    min-width: 44px;
}

button:hover, .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,123,255,0.3);
}

button:active, .btn:active {
    transform: translateY(0);
}

button:disabled {
    background: #6c757d;
    cursor: not-allowed;
    transform: none;
}

/* ===========================================
   5. FORMULARIOS Y INPUTS RESPONSIVOS
   ========================================== */
.form-control {
    padding: 12px;
    font-size: 16px; /* Evita zoom en iOS */
    border: 2px solid #e9ecef;
    border-radius: 8px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
}

.buscador-container {
    background: white;
    border: 2px solid #0d6efd;
    border-radius: 10px;
    padding: 20px;
    margin: 15px 0;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.buscador-header {
    text-align: center;
    margin-bottom: 15px;
}

.buscador-titulo {
    color: #0d6efd;
    font-weight: bold;
    font-size: 1.3rem;
    margin-bottom: 8px;
}

.buscador-instruccion {
    color: #666;
    font-size: 1rem;
    margin-bottom: 0;
}

.buscador-input-container {
    position: relative;
}

.buscador-input {
    width: 100%;
    padding: 15px 20px;
    font-size: 1.1rem;
    border: 2px solid #ddd;
    border-radius: 8px;
    background: #f8f9fa;
    transition: all 0.3s ease;
}

/* Eliminar focus del campo readonly - evita bloqueo de scroll */
.buscador-input:focus {
    outline: none;
    border-color: #ddd; /* Mantener color original */
    background: #f8f9fa; /* Mantener fondo original */
    box-shadow: none; /* Eliminar sombra verde/azul */
}

/* Efecto hover sutil en su lugar */
.buscador-input:hover {
    border-color: #0d6efd;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.buscador-icon {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.2rem;
    color: #666;
    pointer-events: none;
}

/* MEJORAS PARA MÓVILES ANDROID - TECLADO */
/* Prevenir zoom automático en inputs en iOS */
input[type="text"], input[type="number"], input[type="email"], input[type="password"], textarea, select {
    font-size: 16px !important; /* Previene zoom en iOS */
    -webkit-appearance: none;
    appearance: none;
}

/* Comportamiento cuando el teclado está activo */
body.keyboard-active {
    position: fixed;
    width: 100%;
}

/* Auto-scroll para campos activos */
.input-active {
    border: 3px solid #28a745 !important;
    background: #f8fff9 !important;
    box-shadow: 0 0 10px rgba(40, 167, 69, 0.3) !important;
}

@media (max-width: 768px) {
    /* Espaciado extra en móviles */
    .buscador-container {
        margin-bottom: 20px; /* Reducir espacio ya que no hay botones */
    }
}

.buscador-container input {
    width: 100%;
    font-size: 16px;
}

/* ===========================================
   6. TABLAS RESPONSIVAS - SIN SCROLL HORIZONTAL
   ========================================== */
.table-responsive {
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden; /* Eliminar scroll horizontal */
    border-radius: 8px;
    border: 1px solid #dee2e6;
    width: 100%;
}

/* Configuración general para todas las tablas */
.table {
    table-layout: fixed !important; /* Ancho fijo para controlar columnas */
    width: 100%;
    word-wrap: break-word; /* Permitir corte de palabras largas */
}

.table th,
.table td {
    padding: 8px 4px; /* Reducir padding para más espacio */
    white-space: normal !important; /* Permitir wrap en todas las celdas */
    word-wrap: break-word; /* Cortar palabras largas */
    overflow: hidden; /* Ocultar contenido desbordante */
    text-overflow: ellipsis; /* Mostrar ... cuando se corta */
    vertical-align: middle;
}

/* Distribución de columnas más inteligente */
.table th:first-child,
.table td:first-child {
    width: 40%; /* Producto/Descripción - más espacio */
}

.table th:nth-child(2),
.table td:nth-child(2) {
    width: 20%; /* Cantidad - menos espacio */
    text-align: center;
}

.table th:nth-child(3),
.table td:nth-child(3) {
    width: 25%; /* Precio - espacio medio */
    text-align: right;
}

.table th:last-child,
.table td:last-child {
    width: 15%; /* Acciones - mínimo espacio */
    text-align: center;
}

/* Forzar ajuste automático para todas las tablas del proyecto */
.table-striped,
.table-hover,
.table-bordered {
    table-layout: auto !important;
}

.table-striped th,
.table-striped td,
.table-hover th,
.table-hover td,
.table-bordered th,
.table-bordered td {
    width: auto !important;
    max-width: none !important;
}

.inventario-fija {
    margin-bottom: 0;
}

.inventario-fija thead th {
    position: sticky;
    top: 0;
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    font-size: 0.9rem;
    padding: 12px 8px;
}

.inventario-fija tbody td {
    padding: 10px 8px;
    font-size: 0.9rem;
    border-bottom: 1px solid #f1f1f1;
}

.inventario-fija tbody tr:hover {
    background-color: #f8f9fa;
}

.inventario-fija tbody tr {
    cursor: pointer;
    transition: background-color 0.2s ease;
}

/* ===========================================
   7. MEDIOS DE PAGO RESPONSIVOS
   ========================================== */
.modal-pago-container {
    display: flex;
    flex-direction: row; /* Cambiar a horizontal */
    gap: 15px; /* Reducir espacio entre iconos */
    margin: 15px 0; /* Reducir margen vertical */
    justify-content: center; /* Centrar los elementos */
    align-items: center;
    flex-wrap: wrap; /* Permitir salto de línea en pantallas pequeñas */
    width: 100%; /* Usar todo el ancho disponible */
}

.pago-opcion {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 12px; /* Reducir padding */
    border-radius: 15px; /* Bordes más redondeados */
    border: 2px solid transparent;
    min-width: 100px; /* Reducir ancho mínimo */
    text-align: center;
}

.pago-opcion:hover {
    background: rgba(0,0,0,0.05);
    border-color: #007bff;
    transform: translateY(-3px); /* Reducir elevación en hover */
}

.pago-opcion:active {
    transform: translateY(0);
    background: rgba(0,0,0,0.1);
}

.icono-pago-principal {
    width: 80px; /* Reducir tamaño de iconos */
    height: 80px;
    border-radius: 12px; /* Reducir bordes */
    object-fit: contain;
    background: white;
    padding: 8px; /* Reducir padding interno */
    box-shadow: 0 3px 8px rgba(0,0,0,0.15); /* Reducir sombra */
    transition: all 0.3s ease;
    border: 2px solid #f0f0f0; /* Reducir borde */
    margin: 0 auto; /* Centrar completamente */
}

.pago-opcion:hover .icono-pago-principal {
    box-shadow: 0 4px 12px rgba(0,0,0,0.25); /* Reducir sombra hover */
    transform: scale(1.05); /* Reducir escalado */
    border-color: #007bff;
}

.texto-pago {
    margin-top: 6px; /* Reducir espacio arriba */
    font-size: 13px; /* Reducir texto */
    font-weight: 600;
    color: #333;
    text-align: center;
    width: 100%;
}

/* Mantener compatibilidad con estilos antiguos pero ocultos */
.pago-btn {
    display: none !important;
}

.pago-efectivo, .pago-nequi, .pago-daviplata {
    display: none !important;
}

.icono-pago {
    display: none !important;
}

.pago-emoji {
    display: none !important;
}

/* ===========================================
   8. CARRITO Y VENTAS
   ========================================== */
#carritoVenta {
    margin: 15px 0;
}

.carrito-total {
    text-align: right;
    font-weight: 700;
    font-size: 1.1rem;
    margin-top: 15px;
    padding: 15px;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-radius: 8px;
    border-left: 4px solid #28a745;
}

.carrito-acciones {
    text-align: right;
    margin-top: 15px;
}

/* ===========================================
   9. CUENTAS Y ALERTAS
   ========================================== */
.cuenta-item {
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 8px;
}

.cuenta-item:hover {
    background-color: #f8f9fa;
    transform: translateX(5px);
}

.cuenta-pendiente-alert {
    cursor: pointer;
    transition: transform 0.3s ease;
}

.cuenta-pendiente-alert:hover {
    transform: scale(1.02);
}

.alert {
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 10px;
}

/* ===========================================
   10. DETALLES EXPANDIBLES
   ========================================== */
details {
    margin: 10px 0;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    overflow: hidden;
}

details summary {
    cursor: pointer;
    padding: 12px 15px;
    background: #f8f9fa;
    color: #007bff;
    font-weight: 600;
    user-select: none;
    transition: background-color 0.3s ease;
}

details summary:hover {
    background: #e9ecef;
    color: #0056b3;
}

details[open] summary {
    border-bottom: 1px solid #e9ecef;
}

details .detalle-content {
    padding: 15px;
}

/* ===========================================
   11. RESULTADO DE BÚSQUEDA
   ========================================== */
.resultado-busqueda {
    min-height: 40px;
    text-align: center;
    margin-bottom: 15px;
    color: #007bff;
    font-weight: 600;
    display: none;
}

/* ===========================================
   12. RESPONSIVE BREAKPOINTS
   ========================================== */

/* Tablets */
@media (min-width: 576px) {
    .container,
    .container1,
    .container2,
    .container3,
    .containerPendientes,
    .containerResumenTurno {
        max-width: 650px;
        padding: 25px;
    }
    
    h1, .titulo-superior {
        font-size: 1.75rem;
    }
    
    .table-responsive {
        max-height: 350px;
    }
    
    /* Tabla resumen de productos en tablets */
    .tabla-resumen-productos {
        margin: 0 -25px; /* Más extensión en tablets */
        padding: 0 25px;
    }
    
    .tabla-resumen-productos .table {
        font-size: 0.9rem; /* Fuente un poco más grande en tablets */
    }
    
    .tabla-resumen-productos th:first-child,
    .tabla-resumen-productos td:first-child {
        width: 50% !important;
    }
    
    .tabla-resumen-productos th:nth-child(2),
    .tabla-resumen-productos td:nth-child(2) {
        width: 25% !important;
    }
    
    .tabla-resumen-productos th:nth-child(3),
    .tabla-resumen-productos td:nth-child(3) {
        width: 25% !important;
    }
}

/* Tablets grandes */
@media (min-width: 768px) {
    .container,
    .container1,
    .container2,
    .container3,
    .containerPendientes,
    .containerResumenTurno {
        max-width: 850px;
        padding: 30px;
    }
    
    h1, .titulo-superior {
        font-size: 2rem;
    }
    
    /* Nuevos estilos para iconos grandes en móviles */
    .modal-pago-container {
        flex-direction: column; /* Vertical en móviles */
        gap: 10px; /* Reducir espacio entre elementos */
        margin: 15px auto; /* Reducir margen */
        width: 100%;
        align-items: center;
    }
    
    .pago-opcion {
        padding: 15px; /* Reducir padding en móviles */
        min-width: 120px; /* Reducir ancho en móviles */
        width: 100%;
        max-width: 160px; /* Reducir ancho máximo */
    }
    
    .icono-pago-principal {
        width: 85px; /* Reducir iconos en móviles */
        height: 85px;
        padding: 10px; /* Reducir padding interno */
        border-radius: 12px; /* Reducir bordes */
    }
    
    .texto-pago {
        font-size: 15px; /* Reducir texto en móviles */
        margin-top: 8px; /* Reducir espacio arriba */
    }
    
    .table-responsive {
        max-height: 400px;
        overflow-x: hidden !important; /* Forzar eliminación de scroll horizontal */
    }
    
    /* Mejoras específicas para carrito en móviles */
    .table-carrito {
        font-size: 0.75rem; /* Fuente aún más pequeña en móviles */
    }
    
    .table-carrito th,
    .table-carrito td {
        padding: 6px 2px; /* Padding muy reducido */
        font-size: 0.75rem;
    }
    
    /* Distribución específica para móviles - carrito */
    .table-carrito th:first-child,
    .table-carrito td:first-child {
        width: 30%; /* Menos espacio para producto en móviles */
    }
    
    .table-carrito th:nth-child(2),
    .table-carrito td:nth-child(2) {
        width: 12%; /* Cantidad muy reducida */
    }
    
    .table-carrito th:nth-child(3),
    .table-carrito td:nth-child(3) {
        width: 23%; /* Precio */
    }
    
    .table-carrito th:nth-child(4),
    .table-carrito td:nth-child(4) {
        width: 25%; /* Subtotal */
    }
    
    .table-carrito th:last-child,
    .table-carrito td:last-child {
        width: 10%; /* Botón eliminar */
    }
    
    /* Botones en carrito móvil aún más compactos */
    .carrito-row .btn {
        padding: 2px 4px;
        font-size: 0.6rem;
    }
    
    /* Tablas generales en móviles */
    .table th,
    .table td {
        padding: 6px 2px !important; /* Padding muy reducido */
        font-size: 0.8rem !important;
    }
    
    /* Header inventario en móviles */
    .inventario-header {
        padding: 10px;
    }
    
    .inventario-gif {
        width: 30px;
        height: 30px;
        margin-right: 8px;
    }
    
    .inventario-titulo {
        font-size: 1rem;
    }
}

/* Desktop */
@media (min-width: 992px) {
    .container,
    .container1,
    .container2,
    .container3,
    .containerPendientes,
    .containerResumenTurno {
        max-width: 1100px;
        padding: 35px;
    }
    
    body {
        padding: 20px;
    }
    
    .table-responsive {
        max-height: 450px;
    }
}

/* Desktop grande */
@media (min-width: 1200px) {
    .container,
    .container1,
    .container2,
    .container3,
    .containerPendientes,
    .containerResumenTurno {
        max-width: 1300px;
        padding: 40px;
    }
}

/* ===========================================
   13. MOBILE FIRST ESPECÍFICOS
   ========================================== */

/* Extra pequeño - móviles */
@media (max-width: 575.98px) {
    body {
        padding: 5px;
    }
    
    .container,
    .container1,
    .container2,
    .container3,
    .containerPendientes,
    .containerResumenTurno {
        margin: 5px auto;
        padding: 15px;
        border-radius: 8px;
    }
    
    h1, .titulo-superior {
        font-size: 1.3rem;
        margin-bottom: 15px;
    }
    
    button, .btn {
        padding: 10px 15px;
        font-size: 14px;
        margin: 3px 1px;
        width: 100%;
    }
    
    /* Nuevos estilos para iconos en tabletas */
    .modal-pago-container {
        gap: 12px; /* Reducir espacio en tabletas */
        margin: 20px auto; /* Reducir margen */
    }
    
    .pago-opcion {
        padding: 15px; /* Reducir padding en tabletas */
        min-width: 110px; /* Reducir ancho en tabletas */
    }
    
    .icono-pago-principal {
        width: 75px; /* Reducir iconos en tabletas */
        height: 75px;
        padding: 8px; /* Reducir padding */
        border-radius: 12px;
    }
    
    .texto-pago {
        font-size: 14px; /* Reducir texto */
        margin-top: 8px; /* Reducir espacio */
    }
    
    .table-responsive {
        max-height: 250px;
        font-size: 0.85rem;
    }
    
    /* Tabla resumen de productos más ancha en móviles */
    .tabla-resumen-productos {
        width: 100% !important;
        margin: 0 -18px; /* Más extensión hacia los bordes */
        padding: 0 18px;
        max-width: calc(100vw - 5px); /* Usa más ancho de la pantalla */
    }
    
    .tabla-resumen-productos .table {
        margin-bottom: 0;
        font-size: 0.8rem; /* Fuente ligeramente más grande */
        table-layout: fixed !important; /* Layout fijo para controlar anchos */
        width: 100%;
    }
    
    /* Hacer los precios más compactos */
    .tabla-resumen-productos th:nth-child(2),
    .tabla-resumen-productos td:nth-child(2),
    .tabla-resumen-productos th:nth-child(3),
    .tabla-resumen-productos td:nth-child(3) {
        font-size: 0.7rem; /* Fuente aún más pequeña para números */
        font-weight: 600; /* Negrita para compensar */
    }
    
    .tabla-resumen-productos th,
    .tabla-resumen-productos td {
        padding: 8px 5px; /* Padding más generoso */
        white-space: nowrap;
        width: auto !important;
    }
    
    /* Distribución específica de columnas */
    .tabla-resumen-productos th:first-child,
    .tabla-resumen-productos td:first-child {
        white-space: normal;
        width: 55% !important; /* Más espacio para producto */
        max-width: 55%;
    }
    
    .tabla-resumen-productos th:nth-child(2),
    .tabla-resumen-productos td:nth-child(2) {
        text-align: center;
        width: 25% !important; /* Espacio medio para precio */
        max-width: 25%;
    }
    
    .tabla-resumen-productos th:nth-child(3),
    .tabla-resumen-productos td:nth-child(3) {
        text-align: right;
        width: 20% !important; /* Menos espacio para subtotal */
        max-width: 20%;
    }
    
    /* Botones de cantidad en móviles - extra compactos */
    .btn-cantidad {
        min-width: 20px !important;
        max-width: 20px !important;
        min-height: 20px !important;
        max-height: 20px !important;
        width: 20px !important;
        height: 20px !important;
        padding: 0 !important;
        font-size: 0.6rem !important;
        margin: 0 1px !important;
    }
    
    /* Contenedor de botones más compacto */
    .tabla-resumen-productos .btn-cantidad {
        min-width: 18px !important;
        max-width: 18px !important;
        min-height: 18px !important;
        max-height: 18px !important;
        width: 18px !important;
        height: 18px !important;
        font-size: 0.55rem !important;
    }
    
    /* Mejor distribución de elementos en las celdas con botones */
    .tabla-resumen-productos td .mt-1,
    .table td .mt-1 {
        margin-top: 0.25rem !important;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        gap: 3px; /* Espacio entre elementos */
    }
    
    /* Número de cantidad más compacto */
    .tabla-resumen-productos .mx-2,
    .table .mx-2 {
        margin-left: 0.25rem !important;
        margin-right: 0.25rem !important;
        font-size: 0.7rem;
        font-weight: bold;
        min-width: 15px;
        text-align: center;
    }
    
    /* Total centrado en el pie de tabla */
    .tabla-resumen-productos .table-success th {
        background-color: #d1e7dd !important;
        color: #0f5132 !important;
        font-weight: bold;
        padding: 12px 8px;
        border: none;
    }

/* ESTILOS ESPECÍFICOS PARA RESUMEN DE TURNO - SIN FONDOS VERDES */
.containerResumenTurno .card-header.bg-light,
#resumenTurnoContent .card-header.bg-light {
    background-color: #f8f9fa !important;
    color: #212529 !important;
}

.containerResumenTurno .p-3.rounded,
#resumenTurnoContent .p-3.rounded {
    background-color: #ffffff !important;
    border: 1px solid #dee2e6 !important;
}

.containerResumenTurno .bg-warning,
#resumenTurnoContent .bg-warning {
    background-color: #fff3cd !important;
    color: #856404 !important;
}

.containerResumenTurno .bg-secondary,
#resumenTurnoContent .bg-secondary {
    background-color: #6c757d !important;
    color: #ffffff !important;
}

.containerResumenTurno .bg-primary,
#resumenTurnoContent .bg-primary {
    background-color: #0d6efd !important;
    color: #ffffff !important;
}

/* Específicamente para sobrescribir cualquier bg-success en resumen */
.containerResumenTurno .bg-success,
#resumenTurnoContent .bg-success {
    background-color: #f8f9fa !important;
    color: #212529 !important;
}

/* Específicamente para los elementos que se ven verdes */
.containerResumenTurno .card-header,
#resumenTurnoContent .card-header {
    background-color: #f8f9fa !important;
    color: #212529 !important;
    border-bottom: 1px solid #dee2e6 !important;
}

.containerResumenTurno .table-success th,
#resumenTurnoContent .table-success th {
    background-color: #f8f9fa !important;
    color: #212529 !important;
}
    
    .inventario-fija thead th {
        padding: 8px 4px;
        font-size: 0.8rem;
    }
    
    .inventario-fija tbody td {
        padding: 8px 4px;
        font-size: 0.8rem;
    }
    
    .form-control {
        padding: 10px;
    }
    
    .carrito-total {
        font-size: 1rem;
        padding: 12px;
    }
}

/* ===========================================
   14. ORIENTACIÓN LANDSCAPE MÓVIL
   ========================================== */
@media (max-height: 500px) and (orientation: landscape) {
    .table-responsive {
        max-height: 180px;
    }
    
    /* Estilos para iconos en landscape móvil */
    .modal-pago-container {
        flex-direction: row; /* Horizontal en landscape */
        gap: 15px; /* Espacio compacto */
        max-width: 100%;
        justify-content: center; /* Centrar perfectamente */
        margin: 10px auto; /* Margen muy reducido */
    }
    
    .pago-opcion {
        padding: 8px; /* Padding muy compacto */
        min-width: 80px; /* Ancho reducido */
    }
    
    .icono-pago-principal {
        width: 55px; /* Iconos más compactos para landscape */
        height: 55px;
        padding: 6px;
        border-radius: 10px;
    }
    
    .texto-pago {
        font-size: 12px; /* Texto compacto */
        margin-top: 4px; /* Espacio mínimo */
    }
    
    h1, .titulo-superior {
        font-size: 1.2rem;
        margin-bottom: 10px;
    }
}

.container3 {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.container4 {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
}

/* Titulos */
h1, h2, h3 {
    color: #006d77;
    font-weight: 700;
    text-align: center;
    margin-bottom: 15px;
}

/* Texto resaltado */
.highlight {
    color: #00b4d8;
    font-weight: bold;
}

/* ============================
   🎨 Botones unificados
   ============================ */
button,
.btn {
    display: inline-block;
    min-width: 120px;       /* antes 140px */
    padding: 10px 18px;     /* antes 12px 24px */
    font-size: 0.95rem;     /* más compacto */
    font-weight: 600;
    text-align: center;
    border: none;
    border-radius: 30px;     /* 🔹 Bordes redondeados modernos */
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

/* Efectos generales */
button:hover,
.btn:hover {
    transform: scale(1.05);
}

/* 🔹 Botones pequeños */
.btn-sm {
    min-width: 40px !important;
    padding: 4px 6px !important;
    font-size: 0.75rem !important;
    border-radius: 6px !important;
}

button:active,
.btn:active {
    transform: scale(0.97);
}

/* 🔹 Variantes de color */
.btn-primary {
    background-color: #2542c4 !important;
    color: white !important;
}
.btn-primary:hover {
    background-color: #1d009c !important;
}

.btn-warning {
    background-color: #fd9814 !important;
    color: white !important;
}
.btn-warning:hover {
    background-color: #e68100 !important;
}

.btn-danger,
#closeButton {
    background-color: #dc3545 !important;
    color: white !important;
}
.btn-danger:hover,
#closeButton:hover {
    background-color: #b02a37 !important;
}

.btn-secondary {
    background-color: #6c757d !important;
    color: white !important;
}
.btn-secondary:hover {
    background-color: #5a6268 !important;
}

/* Contenedor de botones */
.btn-orange {
    background-color: #2542c4 !important;
    color: white !important;
    border: none !important;
    min-width: 100px !important;  /* 👈 más pequeño */
    padding: 8px 16px !important; /* 👈 menos alto */
    font-size: 0.9rem !important; /* 👈 texto más chico */
}
.btn-orange:hover {
    background-color: #1d009c !important;
}

.botones {
    display: flex;
    justify-content: center;
    gap: 15px;
    flex-wrap: wrap;
    margin-top: 20px;
}

/* Inputs y formularios */
input, select, textarea {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-size: 1rem;
    transition: all 0.2s ease;
}

input:focus, select:focus, textarea:focus {
    outline: none;
    border-color: #00b4d8;
    box-shadow: 0 0 5px rgba(0, 180, 216, 0.5);
}

/* Tarjetas */
.card {
    background: white;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

/* Enlaces */
a {
    color: #0077b6;
    text-decoration: none;
    font-weight: 600;
}

a:hover {
    text-decoration: underline;
}

/* Tablas */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    border: 1px solid #ddd;
    text-align: left;
    vertical-align: middle;
}

th {
    background-color: #00b4d8;
    color: white;
}

/* Responsive general */
@media (max-width: 768px) {
    body {
        font-size: 15px;
    }
    h1 {
        font-size: 1.5rem;
    }
    button, .btn {
        font-size: 1rem;
        padding: 12px;
        min-width: 120px;
    }
    table {
        font-size: 0.9rem;
    }
}

/* Animaciones suaves */
.fade-in {
    animation: fadeIn 0.5s ease-in-out forwards;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* =========================================
   Estilos específicos del carrito de compras
   ========================================= */

/* Columna cantidad */
.col-cantidad {
    width: 1%;
    white-space: nowrap;
    text-align: center;
}

/* Contenedor botones y número */
.cantidad-container {
    display: inline-flex;
    align-items: center;
    gap: 1px;
}

/* Botones +/- */
.btn-cantidad {
    background-color: #6c757d !important; /* Gris semi oscuro */
    color: white !important;
    border: 1px solid #5a6268;
    border-radius: 3px;
    padding: 2px 6px; /* Padding más equilibrado */
    font-size: 0.7rem; /* Texto más pequeño */
    line-height: 1;
    cursor: pointer;
    min-width: 24px !important; /* Ancho fijo */
    max-width: 24px !important; /* Ancho máximo fijo */
    min-height: 24px !important; /* Alto fijo */
    max-height: 24px !important; /* Alto máximo fijo */
    width: 24px !important; /* Ancho fijo absoluto */
    height: 24px !important; /* Alto fijo absoluto */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin: 1px; /* Pequeño margen entre botones */
}

/* Botones de cantidad específicos para tablas */
.tabla-resumen-productos .btn-cantidad,
.table .btn-cantidad {
    min-width: 22px !important;
    max-width: 22px !important;
    min-height: 22px !important;
    max-height: 22px !important;
    width: 22px !important;
    height: 22px !important;
    padding: 1px 4px;
    font-size: 0.65rem;
    margin: 0 1px;
}

.btn-cantidad:hover {
    background-color: #5a6268 !important; /* Gris más oscuro al hover */
    color: white !important;
}

.cantidad-num {
    min-width: 18px;
    text-align: center;
}

/* Botón quitar */
.btn-quitar {
    background-color: #dc3545 !important;
    color: #fff !important;
    padding: 0.5px 1.5px; /* Más pequeño */
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
}

.btn-quitar:hover {
    background-color: #b02a37 !important;
}

/* Responsive carrito */
@media (max-width: 768px) {
    .cantidad-container {
        gap: 4px; /* Gap más pequeño */
    }
    .btn-cantidad {
    padding: 0.5px 1.5px; /* Más pequeño */
        font-size: 0.65rem; /* Texto más pequeño */
        min-width: 22px; /* Ancho más pequeño */
        min-height: 22px; /* Alto más pequeño */
    }
    .cantidad-num {
        min-width: 20px;
        font-size: 0.8rem;
    }
}

@media (max-width: 420px) {
    .btn-cantidad {
    padding: 0.5px 1.5px; /* Más pequeño */
        font-size: 0.6rem; /* Texto aún más pequeño */
        min-width: 18px; /* Ancho aún más pequeño */
        min-height: 18px; /* Alto aún más pequeño */
    }
    .cantidad-num {
        min-width: 18px;
        font-size: 0.75rem;
    }
}

/* ===========================================
   ESTILOS PARA LIMPIEZA DE CSS EMBEBIDO
   ========================================== */

/* Clases para control de visibilidad mejoradas */
.d-block-force {
    display: block !important;
}

.container-visible {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
}

.container2.container-visible,
.container1.container-visible,
.container3.container-visible,
.containerPendientes.container-visible,
.containerResumenTurno.container-visible {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
}

/* Estilos específicos para el contenedor de login */
.container-login {
    background: white !important;
    border-radius: 12px !important;
    padding: 20px !important;
    margin: 10px auto !important;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;
    min-height: 200px !important;
    border: 3px solid #007bff !important;
    display: block !important;
    visibility: visible !important;
}

.container-login h1 {
    color: #333 !important;
    margin-bottom: 20px !important;
    text-align: center !important;
    font-size: 24px !important;
}

/* Contenedor y estilo del logo en el login */
.logo-container {
    text-align: center !important;
    margin: 20px 0 !important;
}

.logo-login {
    max-width: 150px !important;
    max-height: 150px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-login:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-login {
        max-width: 120px !important;
        max-height: 120px !important;
    }
}

/* Botón de login estilizado */
.btn-login {
    display: block !important;
    visibility: visible !important;
    padding: 10px 20px !important;
    background: #007bff !important;
    color: white !important;
    border: none !important;
    border-radius: 5px !important;
    cursor: pointer !important;
    margin: 0 auto !important;
    text-align: center !important;
    width: fit-content !important;
}

/* Contenedor y estilo del logo en la página principal */
.logo-container-main {
    text-align: center !important;
    margin: 10px 0 20px 0 !important;
}

.logo-main {
    max-width: 100px !important;
    max-height: 100px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-main:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo principal en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-main {
        max-width: 80px !important;
        max-height: 80px !important;
    }
}

/* Contenedor y estilo del logo en la sección de ventas */
.logo-container-ventas {
    text-align: center !important;
    margin: 10px 0 20px 0 !important;
}

.logo-ventas {
    max-width: 90px !important;
    max-height: 90px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-ventas:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo de ventas en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-ventas {
        max-width: 70px !important;
        max-height: 70px !important;
    }
}

/* Contenedor y estilo del logo en la sección de cuentas pendientes */
.logo-container-pendientes {
    text-align: center !important;
    margin: 10px 0 20px 0 !important;
}

.logo-pendientes {
    max-width: 90px !important;
    max-height: 90px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-pendientes:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo de cuentas pendientes en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-pendientes {
        max-width: 70px !important;
        max-height: 70px !important;
    }
}

/* Contenedor y estilo del logo en los detalles de cuentas */
.logo-container-detalle {
    text-align: center !important;
    margin: 10px 0 15px 0 !important;
}

.logo-detalle {
    max-width: 80px !important;
    max-height: 80px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-detalle:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo de detalles en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-detalle {
        max-width: 60px !important;
        max-height: 60px !important;
    }
}

/* Estilos para elementos de inventario */
.inventario-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px solid #dee2e6;
    border-radius: 10px 10px 0 0;
    padding: 15px;
    text-align: center;
    margin-bottom: 0;
}

.inventario-gif {
    width: 40px;
    height: 40px;
    margin-right: 10px;
    vertical-align: middle;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.inventario-titulo {
    display: inline-block;
    margin: 0;
    color: #495057;
    font-weight: 600;
    font-size: 1.1rem;
    vertical-align: middle;
}

.inventario-table-container {
    max-height: 220px;
    overflow-y: auto;
    border-radius: 0 0 8px 8px; /* Solo bordes inferiores redondeados */
    border-top: none; /* Sin borde superior para conectar con header */
}

.inventario-row-clickable {
    cursor: pointer;
}

/* Título de cuenta resaltado en los detalles */
.titulo-cuenta-resaltado {
    color: #ffffff !important;
    font-weight: 700 !important;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5) !important;
    font-size: 1.5rem !important;
    letter-spacing: 0.5px !important;
}

/* Contenedor y estilo del logo en el resumen del turno */
.logo-container-resumen {
    text-align: center !important;
    margin: 10px 0 20px 0 !important;
}

.logo-resumen {
    max-width: 100px !important;
    max-height: 100px !important;
    width: auto !important;
    height: auto !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
    transition: transform 0.3s ease !important;
}

.logo-resumen:hover {
    transform: scale(1.05) !important;
}

/* Responsive para el logo de resumen en pantallas pequeñas */
@media (max-width: 576px) {
    .logo-resumen {
        max-width: 80px !important;
        max-height: 80px !important;
    }
}

/* Estilos para alertas y elementos interactivos */
.alert-clickable {
    cursor: pointer;
    border-left: 5px solid #ffc107;
}

.cuenta-row-clickable {
    cursor: pointer;
}

/* Estilos para resumen de turno */
.resumen-summary-clickable {
    cursor: pointer;
    color: #0d6efd;
}

/* Clases para manipulación de display via JavaScript */
.js-hidden {
    display: none !important;
}

.js-visible {
    display: block !important;
}

.js-inline-block {
    display: inline-block !important;
}

/* Regla específica para evitar conflictos de containers */
.containerPendientes.js-visible ~ .container2,
.containerPendientes.js-visible ~ .container1,
.containerPendientes.js-visible ~ .container3,
.containerPendientes.js-visible ~ .containerResumenTurno {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

/* Cuando containerPendientes está visible, forzar ocultación de container2 */
.containerPendientes.container-visible + .container2,
.containerPendientes.d-block + .container2 {
    display: none !important;
}

.js-opacity-visible {
    opacity: 1 !important;
}

.js-visibility-visible {
    visibility: visible !important;
}

/* Clases adicionales para elementos específicos */
.cuentas-summary-clickable {
    cursor: pointer;
}

.carrito-total-right {
    text-align: right;
    font-weight: bold;
}

.carrito-buttons-right {
    text-align: right;
    margin-top: 10px;
}

/* ===========================================
   ESTILOS PARA PÁGINA 404 ERROR
   ========================================== */

/* Estilos específicos para página 404 */
.error-404-body {
    background: #ECEFF1 !important;
    color: rgba(0,0,0,0.87) !important;
    font-family: Roboto, Helvetica, Arial, sans-serif !important;
    margin: 0 !important;
    padding: 0 !important;
}

.error-404-message {
    background: white;
    max-width: 360px;
    margin: 100px auto 16px;
    padding: 32px 24px 16px;
    border-radius: 3px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

.error-404-message h3 {
    color: #888;
    font-weight: normal;
    font-size: 16px;
    margin: 16px 0 12px;
}

.error-404-message h2 {
    color: #ffa100;
    font-weight: bold;
    font-size: 16px;
    margin: 0 0 8px;
}

.error-404-message h1 {
    font-size: 22px;
    font-weight: 300;
    color: rgba(0,0,0,0.6);
    margin: 0 0 16px;
}

.error-404-message p {
    line-height: 140%;
    margin: 16px 0 24px;
    font-size: 14px;
}

.error-404-message a {
    display: block;
    text-align: center;
    background: #039be5;
    text-transform: uppercase;
    text-decoration: none;
    color: white;
    padding: 16px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

.error-404-load {
    color: rgba(0,0,0,0.4);
    text-align: center;
    font-size: 13px;
}

/* ===========================================
   MODALES OPTIMIZADOS PARA ACCESIBILIDAD
   Diseñado para operaria de 53 años
   ========================================== */

/* Modal principal - Más grande y legible */
.swal2-popup {
    width: 95% !important;
    max-width: 600px !important;
    padding: 25px !important;
    border-radius: 12px !important;
    box-shadow: 0 8px 32px rgba(0,0,0,0.3) !important;
}

/* Título del modal - Más grande */
.swal2-title {
    font-size: 1.4rem !important;
    font-weight: bold !important;
    color: #333 !important;
    margin-bottom: 20px !important;
}

/* Contenido del modal - Mejor legibilidad */
.swal2-html-container {
    font-size: 1.1rem !important;
    line-height: 1.5 !important;
    color: #333 !important;
    margin: 15px 0 !important;
}

/* Campos de entrada - Más grandes y contrastados */
.swal2-input,
.swal2-select {
    width: 100% !important;
    max-width: 100% !important;
    box-sizing: border-box !important;
    margin: 12px 0 !important;
    padding: 16px 18px !important;
    font-size: 18px !important; /* Más grande para mejor lectura */
    font-weight: 500 !important;
    border: 3px solid #333 !important; /* Borde más grueso y oscuro */
    border-radius: 8px !important;
    background-color: #ffffff !important;
    color: #000 !important; /* Texto negro sólido */
}

.swal2-input:focus,
.swal2-select:focus {
    border-color: #007bff !important;
    outline: none !important;
    box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.25) !important;
    background-color: #f8f9ff !important;
}

/* Botones del modal - Más grandes y claros */
.swal2-actions {
    gap: 15px !important;
    margin-top: 25px !important;
    flex-direction: column !important;
}

.swal2-confirm,
.swal2-cancel {
    width: 100% !important;
    padding: 18px 25px !important;
    font-size: 18px !important;
    font-weight: bold !important;
    border-radius: 8px !important;
    margin: 8px 0 !important;
    min-height: 56px !important; /* Altura mínima para accesibilidad */
    border: 2px solid transparent !important;
    transition: all 0.2s ease !important;
}

.swal2-confirm {
    background-color: #28a745 !important; /* Verde más claro */
    color: white !important;
    border-color: #1e7e34 !important;
}

.swal2-confirm:hover {
    background-color: #218838 !important;
    transform: scale(1.02) !important;
}

.swal2-cancel {
    background-color: #6c757d !important; /* Gris neutral */
    color: white !important;
    border-color: #545b62 !important;
}

.swal2-cancel:hover {
    background-color: #5a6268 !important;
    transform: scale(1.02) !important;
}

/* Estilos especiales para modales de búsqueda de productos */
.swal2-html-container .table {
    font-size: 1rem !important;
    margin-bottom: 0 !important;
}

.swal2-html-container .table th {
    background-color: #343a40 !important;
    color: white !important;
    font-weight: bold !important;
    padding: 12px 8px !important;
    font-size: 1rem !important;
    border: none !important;
}

.swal2-html-container .table td {
    padding: 12px 8px !important;
    font-size: 1rem !important;
    color: #333 !important;
    border-bottom: 1px solid #dee2e6 !important;
    vertical-align: middle !important;
}

/* Filas clickeables en modales */
.swal2-html-container .table tr:hover {
    background-color: #e3f2fd !important;
    cursor: pointer !important;
}

/* Botones dentro de tablas en modales */
.swal2-html-container .btn {
    padding: 8px 16px !important;
    font-size: 0.9rem !important;
    font-weight: bold !important;
    border-radius: 6px !important;
    min-width: 80px !important;
}

.swal2-html-container .btn-primary {
    background-color: #007bff !important;
    border-color: #0056b3 !important;
    color: white !important;
}

.swal2-html-container .btn-primary:hover {
    background-color: #0056b3 !important;
    transform: scale(1.05) !important;
}

/* Contenedor de tabla con scroll en modales */
.swal2-html-container .table-responsive {
    max-height: 400px !important;
    overflow-y: auto !important;
    border: 2px solid #dee2e6 !important;
    border-radius: 8px !important;
}

/* Responsive para tablets */
@media (min-width: 768px) {
    .swal2-popup {
        width: 550px !important;
        max-width: 90vw !important;
        padding: 30px !important;
    }
    
    .swal2-actions {
        flex-direction: row !important;
        justify-content: center !important;
    }
    
    .swal2-confirm,
    .swal2-cancel {
        width: auto !important;
        min-width: 140px !important;
        margin: 0 10px !important;
    }
}

/* Reglas específicas para móviles - Modales */
@media (max-width: 767px) {
    .swal2-popup {
        width: 98% !important;
        margin: 10px !important;
        padding: 20px !important;
    }
    
    .swal2-title {
        font-size: 1.3rem !important;
        margin-bottom: 15px !important;
    }
    
    .swal2-input,
    .swal2-select {
        font-size: 20px !important; /* Extra grande en móvil */
        padding: 18px !important;
        margin: 15px 0 !important;
    }
    
    .swal2-confirm,
    .swal2-cancel {
        font-size: 20px !important;
        padding: 20px !important;
        min-height: 60px !important;
    }
    
    /* Tablas en modales móviles */
    .swal2-html-container .table {
        font-size: 0.9rem !important;
    }
    
    .swal2-html-container .table th,
    .swal2-html-container .table td {
        padding: 10px 6px !important;
        font-size: 0.9rem !important;
    }
    
    .swal2-html-container .table-responsive {
        max-height: 300px !important;
    }
}

@media (max-width: 600px) {
    .error-404-body,
    .error-404-message {
        margin-top: 0;
        background: white;
        box-shadow: none;
    }
    .error-404-body {
        border-top: 16px solid #ffa100;
    }
}

/* ===============================================
   ESTILOS SIMPLES Y CLAROS PARA EL CARRITO 
   ============================================= */

/* Header del carrito - más simple */
.carrito-header {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px 8px 0 0;
    text-align: center;
    border: 2px solid #007bff;
    border-bottom: none;
}

.carrito-icon {
    width: 35px;
    height: 35px;
    margin-right: 10px;
    vertical-align: middle;
}

.carrito-titulo {
    display: inline-block;
    color: #333;
    margin: 0;
    font-weight: 600;
    font-size: 1.2rem;
    vertical-align: middle;
}

/* Contenedor del carrito - IDÉNTICO al inventario */
.carrito-table-container {
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    width: 100%;
}

/* El carrito ahora usa las mismas clases que inventario */
.carrito-table-container .inventario-fija {
    margin-bottom: 0;
}

.carrito-table-container .inventario-fija thead th {
    position: sticky;
    top: 0;
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    font-size: 0.9rem;
    padding: 12px 8px;
    color: #495057;
}

.carrito-table-container .inventario-fija tbody td {
    padding: 10px 8px;
    font-size: 0.9rem;
    border-bottom: 1px solid #f1f1f1;
}

.carrito-table-container .inventario-row-clickable:hover {
    background-color: #f8f9fa;
}

.carrito-table-container .inventario-row-clickable {
    cursor: default; /* No cursor pointer para carrito */
    transition: background-color 0.2s ease;
}

.carrito-row td {
    vertical-align: middle;
    padding: 12px;
    text-align: center;
}

.producto-cell {
    font-weight: 600;
    color: #333;
    text-align: left;
}

/* Controles de cantidad - distribución optimizada */
.cantidad-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px; /* Gap reducido para móvil */
    width: 100%;
    max-width: 180px; /* Ancho máximo para evitar que se expanda demasiado */
    margin: 0 auto;
}

/* ==========================================
   BOTONES DE CANTIDAD - REDISEÑO PARA ACCESIBILIDAD
   Optimizado para operaria de 53 años
   ========================================== */
.btn-cantidad {
    width: 48px !important;
    height: 48px !important;
    border: 2px solid #333 !important;
    border-radius: 8px !important; /* Rectangular, más fácil de tocar */
    font-size: 24px !important;
    font-weight: 900 !important;
    cursor: pointer !important;
    background: #f8f9fa !important;
    color: #000 !important; /* Negro para máximo contraste */
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    box-shadow: 0 3px 6px rgba(0,0,0,0.2) !important;
    transition: all 0.15s ease !important;
    margin: 0 8px !important;
    text-shadow: none !important;
    line-height: 1 !important;
}

/* Botón MENOS - Rojo sólido con contraste alto */
.btn-menos {
    background: #e74c3c !important; /* Rojo más suave pero visible */
    color: white !important;
    border-color: #c0392b !important;
    font-weight: 900 !important;
}

.btn-menos:hover {
    background: #c0392b !important;
    border-color: #a93226 !important;
    transform: scale(1.1) !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3) !important;
}

/* Botón MÁS - Verde sólido con contraste alto */
.btn-mas {
    background: #27ae60 !important; /* Verde más suave pero visible */
    color: white !important;
    border-color: #229954 !important;
    font-weight: 900 !important;
}

.btn-mas:hover {
    background: #229954 !important;
    border-color: #1e8449 !important;
    transform: scale(1.1) !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3) !important;
}

/* Display de cantidad - Más compacto y proporcional */
.cantidad-display {
    font-weight: 600 !important;
    font-size: 1rem !important; /* Reducido para mejor proporción */
    color: #000 !important; /* Negro sólido */
    min-width: 32px !important; /* Más estrecho */
    text-align: center !important;
    padding: 4px 6px !important; /* Padding más pequeño */
    border: 1px solid #333 !important; /* Borde más fino */
    border-radius: 3px !important;
    background: white !important;
    margin: 0 2px !important; /* Márgenes mínimos */
    line-height: 1.2 !important;
    display: inline-block !important;
}

/* Celda de total - Mayor contraste */
.total-cell {
    font-weight: bold;
    color: #ffffff !important;
    background: #28a745 !important;
    font-size: 1.1rem;
    padding: 6px 10px !important;
    border-radius: 5px !important;
    text-align: center !important;
}

/* Botón quitar - más simple */
.btn-quitar {
    background: #dc3545;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 0.9rem;
    cursor: pointer;
}

/* ===========================================
   ESTILOS MEJORADOS PARA PRECIOS - ALTA VISIBILIDAD
   Optimizado para operaria de 53 años
   ========================================== */

/* Precios en texto - Mejorados */
.text-success {
    color: #ffffff !important;
    background: #28a745 !important;
    padding: 3px 8px !important;
    border-radius: 4px !important;
    font-weight: bold !important;
}

/* ===========================================
   NOMBRE EDITABLE DE CLIENTE
   ========================================== */
.nombre-editable {
    transition: all 0.2s ease !important;
    padding: 2px 6px !important;
    border-radius: 4px !important;
    display: inline-block !important;
}

.nombre-editable:hover {
    background-color: rgba(255,255,255,0.1) !important;
    text-shadow: 0 0 8px rgba(255,255,255,0.8) !important;
    transform: scale(1.02) !important;
}

/* Precios grandes - Tamaño reducido para mejor ajuste */
.precio-destacado {
    color: #ffffff !important;
    background: #28a745 !important;
    padding: 4px 8px !important;
    border-radius: 4px !important;
    font-weight: bold !important;
    font-size: 1rem !important; /* Reducido de 1.3rem */
    display: inline-block !important;
    margin: 1px !important;
}

/* Precios en botones de productos - Más compacto */
.precio-producto {
    color: #ffffff !important;
    background: #28a745 !important;
    padding: 3px 6px !important;
    border-radius: 4px !important;
    font-weight: bold !important;
    font-size: 0.9rem !important; /* Reducido de 1.1rem */
    border: 1px solid #1e7e34 !important;
}

.btn-quitar:hover {
    background: #c82333;
}

/* Footer del carrito */
.carrito-footer {
    background: #f8f9fa;
    padding: 20px;
    border-top: 1px solid #dee2e6;
}

.carrito-total {
    text-align: center;
    margin-bottom: 15px;
    padding: 10px;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
}

.total-label {
    font-size: 1.1rem;
    color: #333;
    margin-right: 10px;
}

.total-amount {
    font-size: 1.3rem;
    font-weight: bold;
    color: #28a745;
}

.carrito-actions {
    text-align: center;
}

.btn-realizar-venta {
    background: #28a745;
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 4px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
}

.btn-realizar-venta:hover {
    background: #218838;
}

/* Responsive para el carrito */
@media (max-width: 576px) {
    .carrito-icon {
        width: 30px;
        height: 30px;
    }
    
    .carrito-titulo {
        font-size: 1.1rem;
    }
    
    /* Botones de cantidad en móvil - GRANDES pero espaciados */
    .btn-cantidad {
        width: 50px !important;
        height: 50px !important;
        font-size: 24px !important;
        min-width: 50px !important;
        min-height: 50px !important;
        margin: 0 2px !important; /* Márgenes reducidos */
        flex-shrink: 0 !important; /* No se reducen */
    }
    
    /* Contenedor de cantidad en móvil */
    .cantidad-controls {
        gap: 3px !important; /* Gap muy pequeño en móvil */
        max-width: 160px !important; /* Ancho reducido */
    }
    
    /* OPTIMIZACIÓN MÓVIL PARA VISTA VENTAS */
    #container1 .table-responsive {
        max-height: 300px; /* Reducir altura para móviles */
        overflow-y: auto;
        overflow-x: hidden !important;
    }
    
    /* Tabla de resultados de búsqueda en ventas */
    #resultadoBusqueda1 .table {
        table-layout: fixed !important;
        font-size: 13px; /* Reducir texto para móviles */
    }
    
    #resultadoBusqueda1 .table th,
    #resultadoBusqueda1 .table td {
        padding: 6px 4px !important; /* Reducir padding para móviles */
        white-space: normal !important;
        word-wrap: break-word !important;
    }
    
    /* Carrito de ventas móvil */
    #carritoVenta .table-responsive {
        max-height: 280px; /* Altura fija para carrito en móviles */
    }
    
    #carritoVenta .inventario-fija {
        font-size: 13px; /* Texto más pequeño en móviles */
    }
    
    #carritoVenta .inventario-fija th,
    #carritoVenta .inventario-fija td {
        padding: 6px 3px !important; /* Reducir espaciado interno */
    }
    
    /* Botones del carrito en móviles - GRANDES pero compactos */
    #carritoVenta .btn-cantidad {
        width: 48px !important;
        height: 48px !important;
        font-size: 22px !important;
        padding: 0 !important;
        margin: 0 1px !important; /* Margen mínimo */
    }
    
    /* Controles específicos del carrito en móvil */
    #carritoVenta .cantidad-controls {
        gap: 2px !important;
        max-width: 140px !important;
    }
    
    /* Display de cantidad en móvil - Proporcional */
    .cantidad-display {
        font-size: 1rem !important; /* Tamaño consistente */
        min-width: 36px !important; /* Proporcionado al móvil */
        padding: 6px 4px !important; /* Padding ajustado */
        margin: 0 1px !important; /* Márgenes muy pequeños */
    }
    
    /* Contenedor principal de ventas */
    #container1 {
        padding: 8px; /* Reducir padding general */
        margin: 0;
    }
    
    /* Ajustar buscador en ventas para móviles */
    #container1 .buscador-container {
        margin-bottom: 10px; /* Reducir espacio inferior */
    }
    
    #container1 .form-control {
        font-size: 16px; /* Evitar zoom en iOS */
        height: 45px; /* Altura adecuada para móviles */
    }
}

/* ===========================================
   REGLAS GLOBALES FINALES - ELIMINAR SCROLL HORIZONTAL
   ========================================== */
   
/* Forzar que ninguna tabla genere scroll horizontal */
.table-responsive,
.carrito-container,
.inventario-table-container,
.tabla-resumen-productos {
    overflow-x: hidden !important;
    width: 100% !important;
    max-width: 100% !important;
}

/* Forzar que todas las tablas usen layout fijo */
.table,
.table-carrito,
.inventario-fija {
    table-layout: fixed !important;
    width: 100% !important;
    max-width: 100% !important;
}

/* Forzar wrap en todas las celdas */
.table th,
.table td,
.table-carrito th,
.table-carrito td,
.inventario-fija th,
.inventario-fija td {
    white-space: normal !important;
    word-wrap: break-word !important;
    overflow: hidden !important;
    text-overflow: ellipsis !important;
}

/* Prevenir que el body genere scroll horizontal */
body {
    overflow-x: hidden;
    max-width: 100vw;
}

/* Contenedores principales sin desbordamiento */
.container,
.container1,
.container2,
.container3,
.containerPendientes,
.containerResumenTurno {
    overflow-x: hidden;
    max-width: 100%;
}




Abono.js

// Abonos.js
// Módulo para manejar abonos parciales de cuentas activas
import { db } from './Conexion.js';
import { formatearPrecio } from './FormateoPrecios.js';
import { mostrarExito, mostrarError, mostrarCargando, cerrarModal } from './SweetAlertManager.js';
import { doc, getDoc, setDoc, updateDoc, collection, runTransaction } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";

/**
 * Procesa un abono parcial de una cuenta
 * @param {string} clienteId - ID del cliente
 * @param {number} montoAbono - Monto del abono
 * @param {string} medioPago - Medio de pago (Efectivo, Nequi, Daviplata)
 * @param {number} saldoActual - Saldo actual de la cuenta
 * @returns {Promise<boolean>} - Éxito de la operación
 */
export async function procesarAbono(clienteId, montoAbono, medioPago, saldoActual) {
    try {
        mostrarCargando('Procesando abono...');

        const idTurno = localStorage.getItem('idTurno');
        if (!idTurno) {
            throw new Error('No hay turno activo');
        }

        // Validaciones
        if (montoAbono <= 0) {
            throw new Error('El monto del abono debe ser mayor a 0');
        }
        if (montoAbono > saldoActual) {
            throw new Error('El abono no puede ser mayor al saldo actual');
        }

        const resultado = await runTransaction(db, async (transaction) => {
            // 1. Obtener datos actuales de la cuenta
            const cuentaRef = doc(db, 'cuentasActivas', clienteId);
            const cuentaDoc = await transaction.get(cuentaRef);
            
            if (!cuentaDoc.exists()) {
                throw new Error('Cuenta no encontrada');
            }

            const datosActuales = cuentaDoc.data();
            const saldoRestante = datosActuales.total - montoAbono;

            // 2. Registrar venta cerrada (abono)
            const ventaCerrada = {
                cliente: datosActuales.cliente,
                productos: datosActuales.productos,
                total: montoAbono,
                tipoVenta: medioPago,
                turno: idTurno,
                fechaCierre: new Date().toLocaleString('es-CO'),
                timestamp: new Date(),
                esAbono: true,
                saldoOriginal: datosActuales.total,
                saldoRestante: saldoRestante
            };

            // Agregar a cuentas cerradas
            await registrarVentaCerrada(ventaCerrada, idTurno);

            // 3. Guardar en historial de abonos
            await guardarHistorialAbono(clienteId, {
                fecha: new Date().toLocaleString('es-CO'),
                monto: montoAbono,
                medioPago: medioPago,
                turno: idTurno,
                saldoAnterior: datosActuales.total,
                saldoRestante: saldoRestante
            });

            // 4. Actualizar cuenta
            if (saldoRestante > 0) {
                // Cuenta pasa a "En cuaderno" con saldo restante
                transaction.update(cuentaRef, {
                    total: saldoRestante,
                    tipo: 'En cuaderno',
                    ultimaActualizacion: new Date(),
                    tieneAbonos: true
                });
            } else {
                // Saldo completo pagado - eliminar cuenta y historial
                transaction.delete(cuentaRef);
                await eliminarHistorialAbono(clienteId);
            }

            return { saldoRestante, ventaCerrada };
        });

        cerrarModal();
        
        if (resultado.saldoRestante > 0) {
            await mostrarExito(`Abono procesado exitosamente\n\nAbono: ${formatearPrecio(montoAbono)}\nSaldo restante: ${formatearPrecio(resultado.saldoRestante)}\n\nLa cuenta ahora está "En cuaderno"`);
        } else {
            await mostrarExito(`¡Cuenta pagada completamente!\n\nÚltimo abono: ${formatearPrecio(montoAbono)}\nLa cuenta ha sido cerrada`);
        }

        return true;

    } catch (error) {
        cerrarModal();
        console.error('Error procesando abono:', error);
        await mostrarError(`Error al procesar el abono: ${error.message}`);
        return false;
    }
}

/**
 * Registra una venta cerrada por abono
 */
async function registrarVentaCerrada(ventaData, idTurno) {
    const cuentasCerradasRef = doc(db, 'cuentasCerradas', idTurno);
    const cuentasCerradasSnap = await getDoc(cuentasCerradasRef);
    
    let clientesArray = [];
    if (cuentasCerradasSnap.exists()) {
        clientesArray = cuentasCerradasSnap.data().clientes || [];
    }
    
    clientesArray.push(ventaData);
    
    await setDoc(cuentasCerradasRef, { clientes: clientesArray }, { merge: true });
}

/**
 * Guarda el historial de abono para un cliente
 */
export async function guardarHistorialAbono(clienteId, abonoData) {
    try {
        const historialRef = doc(db, 'cuentasActivas', 'historial_abonos');
        const historialSnap = await getDoc(historialRef);
        
        let historialCompleto = {};
        if (historialSnap.exists()) {
            historialCompleto = historialSnap.data();
        }
        
        if (!historialCompleto[clienteId]) {
            historialCompleto[clienteId] = [];
        }
        
        historialCompleto[clienteId].push(abonoData);
        
        await setDoc(historialRef, historialCompleto);
        
    } catch (error) {
        console.error('Error guardando historial de abono:', error);
        throw error;
    }
}

/**
 * Obtiene el historial de abonos de un cliente
 */
export async function obtenerHistorialAbono(clienteId) {
    try {
        const historialRef = doc(db, 'cuentasActivas', 'historial_abonos');
        const historialSnap = await getDoc(historialRef);
        
        if (historialSnap.exists()) {
            const historial = historialSnap.data();
            return historial[clienteId] || [];
        }
        
        return [];
        
    } catch (error) {
        console.error('Error obteniendo historial de abono:', error);
        return [];
    }
}

/**
 * Elimina el historial de abonos cuando se completa el pago
 */
export async function eliminarHistorialAbono(clienteId) {
    try {
        const historialRef = doc(db, 'cuentasActivas', 'historial_abonos');
        const historialSnap = await getDoc(historialRef);
        
        if (historialSnap.exists()) {
            const historialCompleto = historialSnap.data();
            delete historialCompleto[clienteId];
            
            await setDoc(historialRef, historialCompleto);
        }
        
    } catch (error) {
        console.error('Error eliminando historial de abono:', error);
    }
}

/**
 * Renderiza el historial de abonos en el HTML
 */
export function renderizarHistorialAbonos(abonos) {
    if (!abonos || abonos.length === 0) {
        return '';
    }
    
    const totalAbonos = abonos.reduce((sum, abono) => sum + abono.monto, 0);
    
    return `
        <div class="mt-3 p-3 border rounded bg-light">
            <h6 class="text-primary mb-2">
                <i class="fas fa-history"></i> Historial de Abonos
            </h6>
            <div class="small mb-2">
                <strong>Total abonado: ${formatearPrecio(totalAbonos)}</strong>
            </div>
            ${abonos.map(abono => `
                <div class="d-flex justify-content-between align-items-center py-1 border-bottom">
                    <div class="small">
                        <div><strong>${abono.fecha}</strong></div>
                        <div class="text-muted">${abono.medioPago} - Turno: ${abono.turno}</div>
                    </div>
                    <div class="text-success fw-bold">${formatearPrecio(abono.monto)}</div>
                </div>
            `).join('')}
        </div>
    `;
}

/**
 * Valida si una cuenta puede recibir abonos
 */
export function puedeRecibirAbono(cuenta) {
    return cuenta.total > 0 && 
           (cuenta.tipo === 'Consumo en el local' || cuenta.tipo === 'En cuaderno');
}

/**
 * Obtiene todos los clientes que tienen historial de abonos
 */
export async function obtenerClientesConAbonos() {
    try {
        const historialRef = doc(db, 'cuentasActivas', 'historial_abonos');
        const historialSnap = await getDoc(historialRef);
        
        if (historialSnap.exists()) {
            const historial = historialSnap.data();
            const clientesConAbonos = [];
            
            for (const clienteId in historial) {
                const abonos = historial[clienteId];
                if (abonos && abonos.length > 0) {
                    // Obtener nombre del cliente desde la cuenta activa
                    const cuentaRef = doc(db, 'cuentasActivas', clienteId);
                    const cuentaSnap = await getDoc(cuentaRef);
                    
                    let nombreCliente = clienteId;
                    if (cuentaSnap.exists()) {
                        nombreCliente = cuentaSnap.data().cliente || clienteId;
                    }
                    
                    clientesConAbonos.push({
                        id: clienteId,
                        nombre: nombreCliente,
                        totalAbonos: abonos.length,
                        ultimoAbono: abonos[abonos.length - 1]
                    });
                }
            }
            
            // Ordenar por fecha del último abono (más reciente primero)
            clientesConAbonos.sort((a, b) => {
                return new Date(b.ultimoAbono.fecha) - new Date(a.ultimoAbono.fecha);
            });
            
            return clientesConAbonos;
        }
        
        return [];
        
    } catch (error) {
        console.error('Error obteniendo clientes con abonos:', error);
        return [];
    }
}





Autenticacion.js

// JavaScript/autenticacion.js
import { 
    getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged 
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-auth.js";
import { 
    getFirestore, doc, setDoc, getDoc, updateDoc, collection, query, where, getDocs 
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";
import { app } from "./Conexion.js";
import { 
    mostrarAdvertencia, 
    mostrarCargando, 
    mostrarExito, 
    mostrarError, 
    mostrarInfo,
    cerrarModal 
} from "./SweetAlertManager.js";

const auth = getAuth(app);
const db = getFirestore(app);

/**
 * Verifica automáticamente si hay una sesión activa y un turno activo
 */
export function verificarSesionAutomatica() {
    // console.log('🔵 verificarSesionAutomatica: Iniciando verificación...');
    
    return new Promise((resolve) => {
        onAuthStateChanged(auth, async (user) => {
            // console.log('🔵 onAuthStateChanged disparado, user:', user ? user.email : 'null');
            
            if (user) {
                // console.log("✅ Usuario autenticado encontrado:", user.email);
                
                try {
                    // Buscar turno activo del usuario
                    const q = query(
                        collection(db, "turnos"),
                        where("usuario", "==", user.email),
                        where("estado", "==", "activo")
                    );
                    // console.log('🔵 Buscando turno activo para:', user.email);
                    
                    const querySnapshot = await getDocs(q);
                    // console.log('🔵 Resultado query turnos:', querySnapshot.size, 'documentos');
                    
                    if (!querySnapshot.empty) {
                        // Turno activo encontrado
                        const turnoActivo = querySnapshot.docs[0].data();
                        localStorage.setItem("idTurno", turnoActivo.idTurno);
                        localStorage.setItem("usuarioActual", user.email);
                        
                        // console.log("✅ Turno activo encontrado:", turnoActivo.idTurno);
                        // console.log("✅ Datos guardados en localStorage");
                        
                        resolve({ 
                            autenticado: true, 
                            turnoActivo: true, 
                            usuario: user.email, 
                            turno: turnoActivo.idTurno 
                        });
                    } else {
                        // Usuario autenticado pero sin turno activo
                        // console.log("Usuario autenticado pero sin turno activo");
                        resolve({ 
                            autenticado: true, 
                            turnoActivo: false, 
                            usuario: user.email, 
                            turno: null 
                        });
                    }
                } catch (error) {
                    console.error("Error al verificar turno:", error);
                    resolve({ 
                        autenticado: true, 
                        turnoActivo: false, 
                        usuario: user.email, 
                        turno: null 
                    });
                }
            } else {
                // console.log("No hay usuario autenticado");
                // Limpiar datos locales
                localStorage.removeItem("idTurno");
                localStorage.removeItem("usuarioActual");
                resolve({ 
                    autenticado: false, 
                    turnoActivo: false, 
                    usuario: null, 
                    turno: null 
                });
            }
        });
    });
}

/**
 * Inicia sesión y crea turno si no hay uno activo en Firestore.
 */
export async function iniciarSesion(email, password, recordar) {
    if (!email || !password) {
        mostrarAdvertencia("Campos incompletos", "Por favor completa todos los campos.");
        throw new Error("Campos incompletos");
    }

    // Guardar datos si el usuario marcó "recordar"
    if (recordar) {
        localStorage.setItem("recordar", "true");
        localStorage.setItem("email", email);
        localStorage.setItem("password", password);
    } else {
        localStorage.removeItem("recordar");
        localStorage.removeItem("email");
        localStorage.removeItem("password");
    }

    try {
        mostrarCargando("Iniciando sesión...");

        // Autenticación en Firebase
        await signInWithEmailAndPassword(auth, email, password);
        cerrarModal();

        // Buscar en Firestore si el usuario ya tiene un turno activo
        const q = query(
            collection(db, "turnos"),
            where("usuario", "==", email),
            where("estado", "==", "activo")
        );
        const querySnapshot = await getDocs(q);

        if (!querySnapshot.empty) {
            // Si existe un turno activo, usarlo y no crear otro
            const turnoExistente = querySnapshot.docs[0].data();
            localStorage.setItem("idTurno", turnoExistente.idTurno);
            mostrarInfo("Turno activo", turnoExistente.idTurno);
            return;
        }

        // Si no hay turno activo, crear uno nuevo
        const fecha = new Date();
        const idTurno = `${fecha.getFullYear()}-${fecha.getMonth() + 1}-${fecha.getDate()}_${fecha.getHours()}-${fecha.getMinutes()}`;
        const fechaInicio = fecha.toLocaleString("es-CO", { timeZone: "America/Bogota" });

        await setDoc(doc(db, "turnos", idTurno), {
            idTurno,
            usuario: email,
            fechaInicio,
            fechaFin: null,
            estado: "activo"
        });

        localStorage.setItem("idTurno", idTurno);
        localStorage.setItem("usuarioActual", email);

        mostrarExito("Éxito", "Turno iniciado correctamente");

    } catch (error) {
        console.error('🔴 Error en iniciarSesion:', error);
        mostrarError("Error al iniciar sesión", error.message);
        // IMPORTANTE: Re-lanzar el error para que Engranaje.js lo capture
        throw error;
    }
}

/**
 * Cierra sesión y termina el turno activo.
 */
export async function cerrarSesion() {
    try {
        const idTurno = localStorage.getItem("idTurno");
        if (idTurno) {
            const fechaFin = new Date().toLocaleString("es-CO", { timeZone: "America/Bogota" });
            await updateDoc(doc(db, "turnos", idTurno), {
                fechaFin,
                estado: "cerrado"
            });
            localStorage.removeItem("idTurno");
        }

        await signOut(auth);

        mostrarExito("Sesión cerrada", "Has cerrado sesión exitosamente.");

    } catch (error) {
        mostrarError("Error al cerrar sesión", error.message);
    }
}



CarritoCompras.js

// JavaScript/carrito.js
// Este archivo maneja toda la lógica del carrito de compras, incluyendo la adición, eliminación y renderización de productos.
import { formatearPrecio } from './FormateoPrecios.js';

// Carrito global (se recomienda manejarlo como un estado en un objeto para mayor control)
window.carrito = {};

/**
 * Agrega un producto al carrito o aumenta su cantidad.
 * @param {string} id - ID del producto.
 * @param {number} precioVenta - Precio de venta del producto.
 */
export function agregarAlCarrito(id, precioVenta) {
    if (window.carrito[id]) {
        window.carrito[id].cantidad += 1;
        window.carrito[id].total = window.carrito[id].cantidad * precioVenta;
    } else {
        window.carrito[id] = {
            nombre: id,
            cantidad: 1,
            precioVenta: precioVenta,
            total: precioVenta
        };
    }
    renderCarrito();
}

/**
 * Aumenta la cantidad de un producto en el carrito.
 * @param {string} id - ID del producto.
 */
export function aumentarCantidad(id) {
    if (window.carrito[id]) {
        window.carrito[id].cantidad += 1;
        window.carrito[id].total = window.carrito[id].cantidad * window.carrito[id].precioVenta;
        renderCarrito();
    }
}

/**
 * Disminuye la cantidad de un producto en el carrito.
 * Si la cantidad llega a 0, lo elimina.
 * @param {string} id - ID del producto.
 */
export function disminuirCantidad(id) {
    if (window.carrito[id]) {
        window.carrito[id].cantidad -= 1;
        if (window.carrito[id].cantidad <= 0) {
            delete window.carrito[id];
        } else {
            window.carrito[id].total = window.carrito[id].cantidad * window.carrito[id].precioVenta;
        }
        renderCarrito();
    }
}

/**
 * Quita un producto del carrito.
 * @param {string} id - ID del producto.
 */
export function quitarDelCarrito(id) {
    if (window.carrito[id]) {
        delete window.carrito[id];
        renderCarrito();
    }
}

/**
 * Renderiza la tabla del carrito de compras en la interfaz.
 */
export function renderCarrito() {
    const divCarrito = document.getElementById('carritoVenta');
    if (!divCarrito) return;

    let html = `
        <!-- Header del carrito con icono -->
        <div class="carrito-header">
            <img src="./pngs/CarritoC.png" alt="Carrito de Compras" class="carrito-icon" />
            <h4 class="carrito-titulo">Carrito de Compras</h4>
        </div>
        
        <div class="table-responsive carrito-table-container">
            <table class="table table-striped table-bordered inventario-fija">
                <thead>
                    <tr>
                        <th>PRODUCTO</th>
                        <th>CANTIDAD</th>
                        <th>TOTAL</th>
                        <th>ACCIONES</th>
                    </tr>
                </thead>
                <tbody>
    `;

    let hayItems = false;
    let totalGeneral = 0;

    for (const id in window.carrito) {
        hayItems = true;
        totalGeneral += window.carrito[id].total;
        html += `
            <tr class="inventario-row-clickable">
                <td>${window.carrito[id].nombre}</td>
                <td class="text-center">
                    <div class="cantidad-controls">
                        <button class="btn-cantidad btn-menos" onclick="window.disminuirCantidad('${id}')">-</button>
                        <span class="cantidad-display">${window.carrito[id].cantidad}</span>
                        <button class="btn-cantidad btn-mas" onclick="window.aumentarCantidad('${id}')">+</button>
                    </div>
                </td>
                <td class="text-end">${formatearPrecio(window.carrito[id].total)}</td>
                <td class="text-center">
                    <button class="btn-quitar" onclick="window.quitarDelCarrito('${id}')">Quitar</button>
                </td>
            </tr>
        `;
    }

    html += `
            </tbody>
        </table>
        </div>
        
        <div class="carrito-footer">
            <div class="carrito-total">
                <span class="total-label">Total General:</span>
                <span class="total-amount">${formatearPrecio(totalGeneral)}</span>
            </div>
            <div class="carrito-actions">
                <button class="btn-realizar-venta" onclick="window.realizarVenta()">
                    Realizar Venta
                </button>
            </div>
        </div>
        </div>
    `;

    divCarrito.innerHTML = hayItems ? html : "No hay productos seleccionados.";
}



Conexion.js

// JavaScript/Conexion.js
// Configuración y conexión a Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-app.js";
import { getAuth, connectAuthEmulator } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-auth.js";
// Importa todo lo necesario de Firestore
import {
    getFirestore, 
    collection,
    increment, 
    doc, 
    addDoc, 
    setDoc, 
    getDoc, 
    updateDoc,
    arrayUnion, 
    runTransaction, 
    serverTimestamp,
    deleteDoc,
    connectFirestoreEmulator
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";

const firebaseConfig = {
    apiKey: "AIzaSyCygT0WyAVlV_AvlOXSPyQht6KlpALPZ10",
    authDomain: "poss25.firebaseapp.com",
    projectId: "poss25",
    storageBucket: "poss25.appspot.com",
    messagingSenderId: "797163205747",
    appId: "1:797163205747:web:7455fe43c4683c59aee606"
};

// Inicializar Firebase y exportar instancias
export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);

// Configuración para desarrollo local - MODO DIAGNÓSTICO
if (location.hostname === 'localhost' || location.hostname === '127.0.0.1') {
    // console.log('🔧 Modo desarrollo detectado - Firebase OAuth warnings visibles para diagnóstico');
    
    // Para desarrollo local, configuramos la auth
    try {
        auth.settings = {
            appVerificationDisabledForTesting: true
        };
    } catch (error) {
        // console.log('ℹ️ Emuladores ya configurados:', error.message);
    }
}

// Exporta las funciones de Firestore para usarlas en otros módulos
export { 
    collection, 
    doc,
    increment, 
    addDoc, 
    setDoc, 
    getDoc, 
    updateDoc,
    arrayUnion, 
    runTransaction, 
    serverTimestamp,
    deleteDoc,
    connectFirestoreEmulator
};




Cuentas.js

// Cuentas.js - versión corregida y adaptada

import {
    getFirestore, doc, getDoc, setDoc, deleteDoc, collection,
    query, where, orderBy, limit, getDocs, updateDoc, arrayUnion, runTransaction
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";

import { app } from "./Conexion.js"; // debe exportar `app`
import { formatearPrecio } from "./FormateoPrecios.js";
import { mostrarCargando, mostrarExito, mostrarError, mostrarConfirmacion, mostrarInput, mostrarInputNumerico, mostrarAdvertencia, cerrarModal, mostrarPersonalizado, mostrarModalAbono} from "./SweetAlertManager.js";
import { procesarAbono, obtenerHistorialAbono, renderizarHistorialAbonos, puedeRecibirAbono, eliminarHistorialAbono } from "./Abonos.js";
import { mostrarModalMedioPago } from "./Engranaje.js";

const db = getFirestore(app);

// **FUNCIÓN DE DIAGNÓSTICO COMPLETO PARA FIRESTORE**
window.diagnosticarFirestore = async function() {
    // console.log('🔧 ==================== DIAGNÓSTICO FIRESTORE ====================');
    
    try {
        // 1. Verificar conectividad básica
// console.log('1️⃣ Verificando conectividad básica...');
        const collectionRef = collection(db, "cuentasActivas");
        const q = query(collectionRef, limit(1));
        const snapshot = await getDocs(q);
        
        if (snapshot.empty) {
            console.error('❌ No hay documentos en cuentasActivas');
            return;
        }
        
        const primeraCtasnapshot = snapshot.docs[0];
        const primerDocId = primeraCtasnapshot.id;
        const datosOriginales = primeraCtasnapshot.data();
        
// console.log('✅ Documento encontrado:', primerDocId);
// console.log('📄 Datos originales:', datosOriginales);
        
        // 2. Intentar escritura simple
// console.log('2️⃣ Intentando escritura simple...');
        const testRef = doc(db, "cuentasActivas", primerDocId);
        
        try {
            await updateDoc(testRef, {
                pruebaEscritura: new Date().toISOString(),
                contadorPruebas: (datosOriginales.contadorPruebas || 0) + 1
            });
// console.log('✅ Escritura simple exitosa');
        } catch (writeError) {
            console.error('❌ Error en escritura simple:', writeError);
            console.error('❌ Código de error:', writeError.code);
            console.error('❌ Mensaje:', writeError.message);
            return;
        }
        
        // 3. Verificar que se guardó
// console.log('3️⃣ Verificando que se guardó...');
        const docActualizado = await getDoc(testRef);
        const datosNuevos = docActualizado.data();
        
        if (datosNuevos.pruebaEscritura) {
            // console.log('✅ Verificación exitosa - datos actualizados:', {
            //     pruebaEscritura: datosNuevos.pruebaEscritura,
            //     contadorPruebas: datosNuevos.contadorPruebas
            // });
        } else {
            console.error('❌ Los datos NO se guardaron en Firestore');
        }
        
        // 4. Probar operación compleja (similar a editar producto)
// console.log('4️⃣ Probando operación compleja...');
        try {
            await updateDoc(testRef, {
                'productos.productoPrueba': {
                    nombre: 'Producto de Prueba',
                    precio: 1000,
                    cantidad: 1
                },
                ultimaModificacion: new Date().toISOString()
            });
// console.log('✅ Operación compleja exitosa');
        } catch (complexError) {
            console.error('❌ Error en operación compleja:', complexError);
        }
        
// console.log('🎯 ================ DIAGNÓSTICO COMPLETADO ================');
        
    } catch (error) {
        console.error('❌ Error general en diagnóstico:', error);
        console.error('❌ Stack trace:', error.stack);
    }
};

// **FUNCIÓN DE PRUEBA ESPECÍFICA PARA CAMBIO DE NOMBRES**
window.probarCambioNombre = async function(clienteId, nuevoNombre) {
// console.log('🧪 ==================== PRUEBA CAMBIO DE NOMBRE ====================');
// console.log('🆔 ClienteId:', clienteId);
// console.log('📝 Nuevo nombre:', nuevoNombre);
    
    try {
        const cuentaRef = doc(db, "cuentasActivas", clienteId);
        
        // 1. Verificar documento actual
// console.log('1️⃣ Verificando documento actual...');
        const docActual = await getDoc(cuentaRef);
        if (!docActual.exists()) {
            console.error('❌ El documento no existe');
            return;
        }
        
        const datosActuales = docActual.data();
// console.log('📄 Nombre actual en BD:', datosActuales.cliente);
        
        // 2. Actualizar nombre
// console.log('2️⃣ Actualizando nombre...');
        await updateDoc(cuentaRef, {
            cliente: nuevoNombre,
            ultimaModificacion: new Date().toISOString(),
            pruebaTimestamp: Date.now()
        });
// console.log('✅ updateDoc ejecutado');
        
        // 3. Verificar cambio inmediatamente
// console.log('3️⃣ Verificando cambio...');
        const docVerificacion = await getDoc(cuentaRef);
        const datosVerificacion = docVerificacion.data();
        
// console.log('📄 Nombre después de actualizar:', datosVerificacion.cliente);
// console.log('📄 Timestamp de prueba:', datosVerificacion.pruebaTimestamp);
        
        if (datosVerificacion.cliente === nuevoNombre) {
// console.log('✅ ÉXITO: El cambio de nombre SÍ funcionó');
        } else {
            console.error('❌ FALLO: El cambio de nombre NO funcionó');
        }
        
// console.log('🎯 ================ PRUEBA COMPLETADA ================');
        
    } catch (error) {
        console.error('❌ Error en prueba de cambio de nombre:', error);
    }
};

// **FUNCIÓN UTILITARIA PARA CONVERTIR idTurno A FECHA LEGIBLE**
function convertirIdTurnoAFecha(idTurno) {
    if (!idTurno || idTurno === 'Sin turno') return 'Sin fecha';
    
    try {
        // Formato esperado: "2025-9-7_10-18" 
        const partes = idTurno.split('_')[0]; // Tomar solo la parte de fecha: "2025-9-7"
        const [año, mes, dia] = partes.split('-');
        
        // Crear objeto Date
        const fecha = new Date(parseInt(año), parseInt(mes) - 1, parseInt(dia));
        
        // Formatear a español
        const opciones = { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        };
        
        return fecha.toLocaleDateString('es-ES', opciones);
    } catch (error) {
        // console.error('Error al convertir idTurno a fecha:', error);
        return 'Fecha inválida';
    }
}

/**
 * Carga detalle de una cuenta activa
 */
export async function cargarDetalleCuenta(clienteId) {
    const detalleContainer = document.getElementById('detalleCuentaContainer');
    if (!detalleContainer) return;

    mostrarCargando('Cargando detalles...');

    try {
        const cuentaRef = doc(db, "cuentasActivas", clienteId);
        const cuentaDoc = await getDoc(cuentaRef);

        if (!cuentaDoc.exists()) {
            detalleContainer.innerHTML = `<p>La cuenta no fue encontrada.</p>`;
            cerrarModal();
            return;
        }

        const cuenta = cuentaDoc.data();
        
        let productosHtml = '';
        let historialHtml = '';
        let total = 0;

        // Generar historial si existe
        const historial = cuenta.historial || [];
        if (historial.length > 0) {
            historialHtml = historial.map((registro, index) => {
                const productosDelRegistro = registro.productos.map(p => {
                    const signo = p.cantidad > 0 ? '+' : '';
                    const color = p.cantidad > 0 ? 'text-success' : 'text-danger';
                    return `<li class="${color}">${signo}${p.cantidad} ${p.nombre} (${formatearPrecio(p.precioVenta)} c/u)</li>`;
                }).join('');
                
                // Icono y color según el tipo de registro
                let icono = '🛒';
                let badgeClass = 'bg-primary';
                let tipoLabel = 'Compra';
                
                if (registro.tipo === 'modificacion') {
                    if (registro.operacion === 'Agregado') {
                        icono = '➕';
                        badgeClass = 'bg-success';
                        tipoLabel = 'Agregado';
                    } else if (registro.operacion === 'Reducido') {
                        icono = '➖';
                        badgeClass = 'bg-warning';
                        tipoLabel = 'Reducido';
                    } else if (registro.operacion === 'Eliminado') {
                        icono = '🗑️';
                        badgeClass = 'bg-danger';
                        tipoLabel = 'Eliminado';
                    }
                }
                
                return `
                    <div class="card mb-2">
                        <div class="card-body py-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>${icono} ${registro.fecha}</strong>
                                    <span class="badge ${badgeClass} ms-2">${tipoLabel}</span>
                                    <small class="text-muted ms-2">${convertirIdTurnoAFecha(registro.turno)}</small>
                                </div>
                                <span class="badge bg-secondary">${formatearPrecio(registro.subtotal)}</span>
                            </div>
                            <details class="mt-1">
                                <summary class="text-primary cuentas-summary-clickable">Ver detalles de esta operación</summary>
                                <ul class="mt-2 mb-0">${productosDelRegistro}</ul>
                            </details>
                        </div>
                    </div>
                `;
            }).join('');
        }

        const productosObj = cuenta.productos || {};
        const esTipoEnCuaderno = cuenta.tipo === 'En cuaderno';
        
        // Obtener la fecha de creación real del primer producto
        let fechaCreacionReal = 'No disponible';
        if (esTipoEnCuaderno) {
            const primerProducto = Object.values(productosObj)[0];
            if (primerProducto && primerProducto.primerPedido) {
                fechaCreacionReal = primerProducto.primerPedido;
            }
        }
        
        // 🔧 SOLUCIÓN: Mantener ORDEN FIJO de productos para evitar confusión de la operaria
        // Convertir a array y ordenar por timestamp de creación o nombre para orden consistente
        const productosArray = Object.entries(productosObj).map(([productoId, producto]) => ({
            id: productoId,
            ...producto,
            // Usar timestamp de creación si existe, sino usar nombre como fallback
            ordenSort: producto.timestampCreacion || producto.primerPedido || producto.nombre || productoId
        }));
        
        // Ordenar por timestamp de creación (más antiguo primero) para mantener orden cronológico
        productosArray.sort((a, b) => {
            // Si ambos tienen timestamp, ordenar cronológicamente
            if (a.ordenSort && b.ordenSort && typeof a.ordenSort === 'string' && a.ordenSort.includes('-')) {
                return a.ordenSort.localeCompare(b.ordenSort);
            }
            // Sino, ordenar alfabéticamente por nombre
            return (a.nombre || a.id).localeCompare(b.nombre || b.id);
        });
        
        // Ahora iterar en orden FIJO
        for (const producto of productosArray) {
            const productoId = producto.id;
            const subtotal = producto.total ?? 0;
            total += subtotal;
            const precioUnitario = producto.precioUnidad ?? producto.precioVenta ?? 0;
            const cantidad = producto.cantidad ?? 0;
            const precioUnitarioFormateado = formatearPrecio(precioUnitario);
            const precioTotalFormateado = formatearPrecio(subtotal);
            
            // Mostrar cantidad: con botones para "Consumo en el local", solo display para "En cuaderno"
            let botonesEdicion = '';
            if (!esTipoEnCuaderno) {
                // Vista completa con botones de edición
                botonesEdicion = `
                    <div class="mt-3 d-flex align-items-center justify-content-center">
                        <button class="btn btn-cantidad btn-menos" onclick="window.disminuirCantidadCuenta('${clienteId}','${productoId}')" 
                                title="Quitar uno">
                            −
                        </button>
                        <span class="cantidad-display">${cantidad}</span>
                        <button class="btn btn-cantidad btn-mas" onclick="window.aumentarCantidadCuenta('${clienteId}','${productoId}')" 
                                title="Agregar uno">
                            +
                        </button>
                    </div>
                `;
            } else {
                // Vista solo de cantidad (misma apariencia, sin botones)
                botonesEdicion = `
                    <div class="mt-3 d-flex align-items-center justify-content-center">
                        <span class="cantidad-display" style="margin: 0 10px;">${cantidad}</span>
                    </div>
                `;
            }

            productosHtml += `
                <tr style="height: 70px;">
                    <td class="py-3 align-middle">
                        <div class="fw-bold mb-2 text-dark" style="font-size: 1rem;">${producto.nombre || 'Producto sin nombre'}</div>
                        ${botonesEdicion}
                    </td>
                    <td class="text-center py-3 align-middle">
                        <span class="precio-producto">${precioUnitarioFormateado}</span>
                    </td>
                    <td class="text-end py-3 align-middle">
                        <span class="precio-destacado">${precioTotalFormateado}</span>
                    </td>
                </tr>
            `;
        }

        const totalFormateado = formatearPrecio(total);
        
        // Obtener historial de abonos si la cuenta es "En cuaderno"
        let historialHTML = '';
        if (cuenta.tipo === 'En cuaderno') {
            const historialAbonos = await obtenerHistorialAbono(clienteId);
            if (historialAbonos.length > 0) {
                historialHTML = renderizarHistorialAbonos(historialAbonos);
            }
        }

        detalleContainer.innerHTML = `
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <h3 class="mb-0 titulo-cuenta-resaltado">📋 Cuenta: 
                                <span id="nombreCliente" class="nombre-editable" 
                                      onclick="editarNombreCliente('${clienteId}', '${cuenta.cliente || 'Cliente'}')"
                                      title="¿Quién es este cliente? Clic para cambiar el nombre"
                                      style="cursor: pointer; text-decoration: underline; text-decoration-style: dashed;">
                                    ${cuenta.cliente || 'Cliente'}
                                </span>
                                <small class="ms-2">✏️</small>
                            </h3>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-2">
                        <span class="badge bg-warning text-dark fs-6">${cuenta.tipo || 'Pendiente'}</span>
                        ${esTipoEnCuaderno ? `<small>📅 Creada: ${fechaCreacionReal}</small>` : ''}
                    </div>
                </div>
                <div class="card-body">
                    <!-- Logo del local -->
                    <div class="logo-container-detalle mb-3">
                        <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-detalle" />
                    </div>
                    
                    <div class="text-center mb-3">
                        <button class="btn btn-primary btn-lg" onclick="agregarProductoACuenta('${clienteId}')">
                            ➕ Agregar Producto
                        </button>
                    </div>
                    
                    <h5 class="mb-3 text-center">📦 Productos ordenados:</h5>
                    
                    <!-- TOTAL FIJO VISIBLE -->
                    <div class="alert alert-success text-center mb-3" style="background: linear-gradient(135deg, #28a745, #20c997); border: none; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                        <h4 class="mb-0 text-white fw-bold" style="font-size: 1.4rem;">
                            💰 TOTAL A PAGAR: ${totalFormateado}
                        </h4>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th style="font-size: 0.95rem; width: 50%;">Producto</th>
                                    <th class="text-center" style="font-size: 0.95rem; width: 25%;">Precio c/u</th>
                                    <th class="text-end" style="font-size: 0.95rem; width: 25%;">Total</th>
                                </tr>
                            </thead>
                            <tbody style="font-size: 1rem;">
                                ${productosHtml}
                            </tbody>
                        </table>
                    </div>
                    
                    ${!esTipoEnCuaderno ? `
                        <!--<div class="alert alert-info text-center mt-3">
                            <i class="bi bi-info-circle"></i> <strong>Consumo en el local:</strong> 
                            Puedes ajustar las cantidades usando los botones + y -
                        </div>-->
                    ` : `
                        <!--<div class="alert alert-warning text-center mt-3">
                            <i class="bi bi-journal-text"></i> <strong>Cuenta en cuaderno:</strong> 
                            Solo lectura - No se pueden modificar las cantidades
                        </div>-->
                    `}
                    
                    ${historialHTML}
                </div>
                <div class="card-footer">
                    <div class="d-flex flex-wrap gap-2 justify-content-center">
                        <button class="btn btn-secondary btn-lg" onclick="mostrarContainer('container2')">
                            ↩️ Volver
                        </button>

                        <button class="btn btn-success btn-lg" onclick="cerrarCuenta('${clienteId}')">
                            💰 Pagar cuenta
                        </button>
                        <button class="btn btn-warning btn-lg" onclick="window.procesarAbonoCliente('${clienteId}')">
                            💵 Abono
                        </button>
                        <button class="btn btn-info btn-lg" onclick="pagoAmericano('${clienteId}')">
                            💳 Pago Americano
                        </button>
                        <button class="btn btn-danger btn-lg" onclick="window.borrarCuentaActiva('${clienteId}')">
                            🗑️ Eliminar
                        </button>
                    </div>
                </div>
            </div>
        `;

        cerrarModal();
    } catch (error) {
        mostrarError(`No se pudo cargar el detalle: ${error.message}`);
        // console.error("Error cargarDetalleCuenta:", error);
    }
}

// --- FUNCIONES PARA EDITAR CANTIDAD DE PRODUCTOS EN CUENTAS ACTIVAS ---

async function modificarCantidadProductoCuenta(clienteId, productoId, operacion) {
    try {
        const cuentaRef = doc(db, "cuentasActivas", clienteId);
        const cuentaDoc = await getDoc(cuentaRef);
        if (!cuentaDoc.exists()) return;
        
        const cuenta = cuentaDoc.data();
        const productos = { ...cuenta.productos };
        const historial = [...(cuenta.historial || [])];
        const producto = productos[productoId];
        if (!producto) return;

        const fechaActual = new Date();
        const fechaFormateada = fechaActual.toLocaleString('es-CO', { 
            timeZone: 'America/Bogota',
            year: 'numeric', 
            month: '2-digit', 
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        const idTurno = localStorage.getItem("idTurno") || cuenta.turno;

        let cantidadCambio = 0;
        let tipoOperacion = '';

        if (operacion === 'aumentar') {
            producto.cantidad += 1;
            cantidadCambio = 1;
            tipoOperacion = 'Agregado';
            
            // Actualizar fecha de último pedido
            producto.ultimaFecha = fechaFormateada;
            if (!producto.primerPedido) {
                producto.primerPedido = fechaFormateada;
            }
        } else if (operacion === 'disminuir') {
            if (producto.cantidad <= 1) {
                // Si solo queda 1, eliminar el producto completamente
                delete productos[productoId];
                cantidadCambio = -producto.cantidad;
                tipoOperacion = 'Eliminado';
            } else {
                producto.cantidad -= 1;
                cantidadCambio = -1;
                tipoOperacion = 'Reducido';
                // Actualizar fecha de último cambio
                producto.ultimaFecha = fechaFormateada;
            }
        }

        // Recalcular total del producto si aún existe
        if (productos[productoId]) {
            producto.total = producto.cantidad * (producto.precioUnidad ?? producto.precioVenta ?? 0);
            productos[productoId] = producto;
        }

        // Crear registro en el historial para el cambio
        const precioUnitario = producto?.precioUnidad ?? producto?.precioVenta ?? 0;
        const valorCambio = Math.abs(cantidadCambio) * precioUnitario;
        
        const registroHistorial = {
            fecha: fechaFormateada,
            turno: idTurno,
            tipo: 'modificacion',
            operacion: tipoOperacion,
            productos: [{
                nombre: producto?.nombre || 'Producto',
                cantidad: cantidadCambio,
                precioVenta: precioUnitario,
                total: operacion === 'disminuir' ? -valorCambio : valorCambio
            }],
            subtotal: operacion === 'disminuir' ? -valorCambio : valorCambio
        };

        historial.push(registroHistorial);

        // Recalcular total general
        let totalCuenta = 0;
        for (const pid in productos) {
            totalCuenta += productos[pid].total ?? 0;
        }

// console.log('📝 INTENTANDO ACTUALIZAR FIRESTORE - modificarCantidadProductoCuenta');
// console.log('🆔 ClienteId:', clienteId);
// console.log('📦 Productos a guardar:', productos);
// console.log('📋 Historial a guardar:', historial);
// console.log('💰 Total calculado:', totalCuenta);

        try {
            await updateDoc(cuentaRef, {
                productos,
                historial,
                total: totalCuenta,
                ultimaActualizacion: new Date()
            });
// console.log('✅ FIRESTORE ACTUALIZADO EXITOSAMENTE - modificarCantidadProductoCuenta');
        } catch (firestoreError) {
            console.error('❌ ERROR ESPECÍFICO DE FIRESTORE:', firestoreError);
            console.error('❌ Código de error:', firestoreError.code);
            console.error('❌ Mensaje de error:', firestoreError.message);
            throw firestoreError; // Re-lanzar para que el catch principal lo capture
        }

        // Recargar detalle
        await cargarDetalleCuenta(clienteId);
        
        // Mostrar notificación de la acción
        const mensaje = operacion === 'aumentar' 
            ? `✅ Agregada 1 unidad de ${producto.nombre}` 
            : `➖ ${producto.cantidad === 0 ? 'Eliminado' : 'Reducida 1 unidad de'} ${producto.nombre}`;
        
        mostrarExito(mensaje);

    } catch (error) {
        console.error('❌ ERROR COMPLETO EN modificarCantidadProductoCuenta:', error);
        mostrarError('No se pudo modificar la cantidad: ' + error.message);
    }
}

// Exponer funciones globales para los botones
window.aumentarCantidadCuenta = function(clienteId, productoId) {
    modificarCantidadProductoCuenta(clienteId, productoId, 'aumentar');
};
window.disminuirCantidadCuenta = function(clienteId, productoId) {
    modificarCantidadProductoCuenta(clienteId, productoId, 'disminuir');
};

// --- BORRAR CUENTA ACTIVA ---
window.borrarCuentaActiva = async function(clienteId) {
    const confirm = await mostrarConfirmacion(
        '¿Borrar cuenta?',
        '¿Seguro que deseas eliminar esta cuenta? Esta acción no se puede deshacer.',
        'Sí, borrar',
        'Cancelar'
    );
    if (!confirm.isConfirmed) return;
    try {
        await deleteDoc(doc(db, "cuentasActivas", clienteId));
        mostrarExito('La cuenta ha sido eliminada.');
        if (typeof mostrarContainer === 'function') mostrarContainer('container2');
    } catch (error) {
        mostrarError('No se pudo eliminar la cuenta: ' + error.message);
    }
};

// ---------- FUNCIONES GLOBALES ----------

// Pago Americano (divide el valor entre personas, pero igual cierra la cuenta)
window.pagoAmericano = async function (clienteId) {
    await cerrarCuenta(clienteId, true);
};

// Pago Efectivo directo
window.pagoEfectivo = async function (clienteId) {
    await cerrarCuenta(clienteId, false);
};

/**
 * Cierra una cuenta activa y la registra en cuentasCerradas/{idTurno}
 * @param {string} clienteId - ID de la cuenta en Firestore
 * @param {boolean} esPagoAmericano - Si true, pregunta división entre personas
 */
window.cerrarCuenta = async function (clienteId, esPagoAmericano = false) {
    try {
        mostrarCargando('Cargando cuenta...');

        // 1) Obtener cuenta
        const cuentaRef = doc(db, "cuentasActivas", clienteId);
        const cuentaDoc = await getDoc(cuentaRef);
        if (!cuentaDoc.exists()) throw new Error("La cuenta no existe.");
        const cuenta = cuentaDoc.data();

        cerrarModal();

        // 2) Pago Americano (opcional)
        if (esPagoAmericano) {
            const { value: partes } = await mostrarInputNumerico(
                '¿Dividir entre cuántas personas?',
                'Número de personas'
            );
            if (!partes) return;

            const montoPorPersona = (cuenta.total ?? 0) / partes;
            await mostrarPersonalizado({
                title: 'Monto por persona',
                html: `<b>Total (en cuenta):</b> ${formatearPrecio(cuenta.total ?? 0)}<br>
                       <b>Entre ${partes} personas:</b> ${formatearPrecio(montoPorPersona)} cada uno`,
                icon: 'info'
            });
        }

        // 3) Selección de medio de pago - USAR FUNCIÓN UNIFICADA
        const medioPagoFinal = await mostrarModalMedioPago(cuenta.total || 0);

        if (!medioPagoFinal) {
            return; // Usuario canceló
        }

        // Mostrar loading para procesamiento
        mostrarCargando(`Procesando pago con ${medioPagoFinal}`);

        // 4) Buscar turno activo
        let idTurno = localStorage.getItem("idTurno");
        if (!idTurno) {
            const turnosRef = collection(db, "turnos");
            const q = query(turnosRef, where("estado", "==", "activo"), orderBy("fechaInicio", "desc"), limit(1));
            const snap = await getDocs(q);
            if (!snap.empty) {
                idTurno = snap.docs[0].id;
                localStorage.setItem("idTurno", idTurno);
            }
        }
        if (!idTurno) throw new Error("No se encontró turno activo.");

  // 5) Usar directamente el total de la cuenta (saldo restante)
const totalCalculado = cuenta.total || 0; // <--- TOMAMOS EL VALOR CORRECTO

// 6) Preparar la lista de productos para el registro (sin recalcular)
const productosObj = cuenta.productos || {};
const productosArray = Object.values(productosObj).map(p => ({
    nombreProducto: String(p?.nombre ?? p?.nombreProducto ?? 'sin nombre'),
    precioVenta: Number(p?.precioUnidad ?? p?.precioVenta ?? 0),
    cantidad: Number(p?.cantidad ?? 0)
}));


// 7) Armar objeto cliente
const horaVenta = new Date().toLocaleTimeString('es-CO', { hour12: false });
const clienteNombreFinal = (medioPagoFinal.toLowerCase() === 'efectivo') ? 'Cliente Ocasional' : (cuenta.cliente || 'Desconocido');
const clienteObj = {
    cliente: clienteNombreFinal,
    tipoVenta: medioPagoFinal,
    horaVenta,
    total: totalCalculado, // <-- AHORA USA EL SALDO RESTANTE CORRECTO
    productos: productosArray, // La lista de productos sigue siendo la original para referencia
    turno: idTurno
};

        // Validaciones
        if (!clienteObj.cliente || !clienteObj.tipoVenta || !clienteObj.productos.length) {
            throw new Error("Datos incompletos para guardar la venta.");
        }

        // 8) Guardar en cuentasCerradas/{idTurno}
        const turnoRef = doc(db, "cuentasCerradas", idTurno);
        const turnoSnap = await getDoc(turnoRef);
        if (!turnoSnap.exists()) {
            await setDoc(turnoRef, { clientes: [clienteObj] });
        } else {
            await updateDoc(turnoRef, { clientes: arrayUnion(clienteObj) });
        }

        // 9) Eliminar cuenta activa
        await deleteDoc(cuentaRef);
        await eliminarHistorialAbono(clienteId);
        
        mostrarExito('La venta ha sido registrada.');
        if (typeof mostrarContainer === 'function') mostrarContainer('container2');

    } catch (error) {
        mostrarError(`No se pudo cerrar la cuenta: ${error.message}`);
        // console.error("Error al cerrar la cuenta:", error);
    }
};

// **FUNCIÓN PARA ABRIR MODAL DE BÚSQUEDA DE PRODUCTOS Y AGREGAR A UNA CUENTA**
window.agregarProductoACuenta = async function(clienteId) {
    try {
        mostrarModalBusquedaProductos(clienteId);
    } catch (error) {
        mostrarError(`Error al abrir búsqueda de productos: ${error.message}`);
        console.error("Error agregarProductoACuenta:", error);
    }
};

// **FUNCIÓN PARA EDITAR EL NOMBRE DEL CLIENTE**
window.editarNombreCliente = async function(clienteId, nombreActual) {
    try {
        const resultado = await mostrarPersonalizado({
            title: '👤 ¿Quién es el cliente?',
            text: `Cambie el nombre de "${nombreActual}" por el nombre real del cliente`,
            input: 'text',
            inputPlaceholder: 'Escriba el nombre del cliente...',
            inputValue: nombreActual,
            showCancelButton: true,
            confirmButtonText: '✅ Cambiar Nombre',
            cancelButtonText: '❌ Cancelar',
            inputValidator: (value) => {
                if (!value || value.trim().length === 0) {
                    return 'El nombre no puede estar vacío';
                }
                if (value.trim().length > 50) {
                    return 'el nombre no puede tener más de 50 caracteres';
                }
                return null;
            }
        });

        if (resultado.isConfirmed && resultado.value) {
            const nuevoNombre = resultado.value.trim();
// console.log('🔄 Intentando cambiar nombre de:', nombreActual, 'a:', nuevoNombre);
            
            if (nuevoNombre !== nombreActual) {
                mostrarCargando('Actualizando nombre...');
                
                try {
// console.log('📝 Actualizando en Firestore - clienteId:', clienteId);
                    
                    // Verificar que el documento existe antes de actualizar
                    const cuentaRef = doc(db, "cuentasActivas", clienteId);
                    const docSnapshot = await getDoc(cuentaRef);
                    
                    if (!docSnapshot.exists()) {
                        throw new Error(`El documento con ID ${clienteId} no existe en cuentasActivas`);
                    }
                    
// console.log('📄 Documento encontrado, datos actuales:', docSnapshot.data());
                    
                    // Actualizar en la base de datos
// console.log('🚀 EJECUTANDO updateDoc para cambio de nombre...');
                    await updateDoc(cuentaRef, {
                        cliente: nuevoNombre,
                        ultimaModificacion: new Date().toISOString()
                    });
                    
// console.log('✅ NOMBRE ACTUALIZADO EN FIRESTORE');
                    
                    // Actualizar la vista inmediatamente en el detalle de la cuenta
                    const spanNombre = document.getElementById('nombreCliente');
                    if (spanNombre) {
                        spanNombre.textContent = nuevoNombre;
                        spanNombre.onclick = () => editarNombreCliente(clienteId, nuevoNombre);
                    }
                    
                    mostrarExito(`✅ Cliente identificado como: "${nuevoNombre}"`);
                    
                    // El listener onSnapshot actualizará automáticamente la lista principal
// console.log('📡 El listener actualizará la lista principal automáticamente');
                    
                } catch (firestoreError) {
                    console.error('❌ Error específico de Firestore:', firestoreError);
                    mostrarError(`Error al guardar en la base de datos: ${firestoreError.message}`);
                    throw firestoreError;
                }
                
            } else {
// console.log('El nombre no cambió');
            }
        }
        
    } catch (error) {
        mostrarError(`Error al actualizar el nombre: ${error.message}`);
        console.error("Error editarNombreCliente:", error);
    }
};

// **FUNCIÓN PARA MOSTRAR MODAL DE BÚSQUEDA DE PRODUCTOS**
async function mostrarModalBusquedaProductos(clienteId) {
    const resultado = await mostrarPersonalizado({
        title: '🔍 Buscar Producto',
        html: `
            <div class="text-start mb-3">
                <h6 class="text-primary mb-2">Cliente: ${clienteId}</h6>
                <p class="text-muted small">Escriba el nombre del producto que desea agregar</p>
            </div>
            <input type="text" id="searchProducto" class="swal2-input" placeholder="Escriba el nombre del producto..." style="font-size: 1.1rem;">
            <div id="resultadosProductos" class="mt-3" style="max-height: 300px; overflow-y: auto;">
                <p class="text-muted">Escriba para buscar productos...</p>
            </div>
        `,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonText: 'Cerrar',
        cancelButtonText: 'Cancelar',
        allowOutsideClick: false,
        didOpen: () => {
            const input = document.getElementById('searchProducto');
            const resultados = document.getElementById('resultadosProductos');
            
            // Listener para búsqueda en tiempo real
            input.addEventListener('input', async (e) => {
                await buscarProductosEnInventario(e.target.value, resultados, clienteId);
            });
            
            // Enfocar el campo de búsqueda
            input.focus();
        }
    });
}

// **FUNCIÓN PARA BUSCAR PRODUCTOS EN EL INVENTARIO**
async function buscarProductosEnInventario(termino, resultadosDiv, clienteId) {
    if (!termino.trim()) {
        resultadosDiv.innerHTML = '<p class="text-muted">Escriba para buscar productos...</p>';
        return;
    }
    
    try {
        resultadosDiv.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div><br>Buscando...</div>';
        
        const inventarioRef = collection(db, "inventario");
        const snapshot = await getDocs(inventarioRef);
        
        const productos = [];
        const terminoLower = termino.toLowerCase();
        
        snapshot.forEach(doc => {
            const nombreProducto = doc.id.toLowerCase();
            if (nombreProducto.includes(terminoLower)) {
                const data = doc.data();
                productos.push({
                    id: doc.id,
                    nombre: doc.id,
                    precio: data.precioVenta || 0,
                    cantidad: data.cantidad || 0
                });
            }
        });
        
        if (productos.length === 0) {
            resultadosDiv.innerHTML = '<p class="text-warning">No se encontraron productos con ese nombre.</p>';
            return;
        }
        
        let html = '<div class="list-group">';
        productos.forEach(producto => {
            const precio = formatearPrecio(producto.precio);
            html += `
                <button type="button" class="list-group-item list-group-item-action text-start" 
                        onclick="seleccionarProductoParaAgregar('${clienteId}', '${producto.id}', ${producto.precio})"
                        style="min-height: 55px; border-left: 3px solid #28a745;">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="fw-bold" style="color: #333; font-size: 1rem;">${producto.nombre}</div>
                            <small style="color: #ffffff; font-size: 0.85rem;">Stock: ${producto.cantidad} disponibles</small>
                        </div>
                        <div class="text-end">
                            <div class="fw-bold" style="color: #fff; background: #28a745; padding: 3px 8px; border-radius: 4px; font-size: 1rem;">${precio}</div>
                        </div>
                    </div>
                </button>
            `;
        });
        html += '</div>';
        
        resultadosDiv.innerHTML = html;
        
    } catch (error) {
        resultadosDiv.innerHTML = '<p class="text-danger">Error al buscar productos.</p>';
        console.error('Error buscando productos:', error);
    }
}

// **FUNCIÓN PARA SELECCIONAR UN PRODUCTO Y AGREGARLO A LA CUENTA**
window.seleccionarProductoParaAgregar = async function(clienteId, nombreProducto, precioVenta) {
    try {
        // Cerrar el modal de búsqueda
        cerrarModal();
        
        // Pedir cantidad
        const result = await mostrarInputNumerico(
            'Cantidad a agregar',
            `¿Cuántas unidades de "${nombreProducto}" desea agregar?`
        );
        
        // Si el usuario canceló
        if (result.dismiss) {
            return;
        }
        
        const cantidad = result.value;
        
        if (!cantidad || isNaN(cantidad) || parseInt(cantidad) <= 0) {
            mostrarAdvertencia('Debe ingresar una cantidad válida mayor a 0.');
            return;
        }
        
        const cantidadNum = parseInt(cantidad);
        const totalProducto = cantidadNum * precioVenta;
        
        // Agregar producto directamente sin confirmación molesta
        await agregarProductoACuentaEnBD(clienteId, nombreProducto, precioVenta, cantidadNum);
        
        // Recargar el detalle de la cuenta inmediatamente
        cargarDetalleCuenta(clienteId);
        
    } catch (error) {
        mostrarError(`Error al agregar producto: ${error.message}`);
        console.error("Error seleccionarProductoParaAgregar:", error);
    }
};

// **FUNCIÓN PARA AGREGAR FÍSICAMENTE EL PRODUCTO A LA BASE DE DATOS**
async function agregarProductoACuentaEnBD(clienteId, nombreProducto, precioVenta, cantidad) {
// console.log('🚀 INICIANDO agregarProductoACuentaEnBD');
// console.log('🆔 ClienteId:', clienteId);
// console.log('📦 Producto:', nombreProducto);
// console.log('💰 Precio:', precioVenta);
// console.log('🔢 Cantidad:', cantidad);
    
    const cuentaRef = doc(db, "cuentasActivas", clienteId);
    const idTurno = localStorage.getItem("idTurno") || null;
    const fechaActual = new Date();
    const fechaFormateada = fechaActual.toLocaleString('es-CO', { 
        timeZone: 'America/Bogota',
        year: 'numeric', 
        month: '2-digit', 
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });

    try {
// console.log('📝 INICIANDO TRANSACTION...');
        await runTransaction(db, async (transaction) => {
        const cuentaDoc = await transaction.get(cuentaRef);
        
        if (!cuentaDoc.exists()) {
            throw new Error(`La cuenta del cliente ${clienteId} no existe.`);
        }
        
        const dataCuenta = cuentaDoc.data();
        const productosCuenta = dataCuenta.productos || {};
        const historialCuenta = dataCuenta.historial || [];
        let totalCuenta = dataCuenta.total || 0;
        
        const totalProducto = cantidad * precioVenta;
        
        // Si el producto ya existe en la cuenta, sumar cantidades
        if (productosCuenta[nombreProducto]) {
            productosCuenta[nombreProducto].cantidad += cantidad;
            productosCuenta[nombreProducto].total += totalProducto;
            productosCuenta[nombreProducto].ultimaFecha = fechaFormateada;
        } else {
            // Nuevo producto en la cuenta
            productosCuenta[nombreProducto] = {
                nombre: nombreProducto,
                precioVenta: precioVenta,
                precioUnidad: precioVenta,
                cantidad: cantidad,
                total: totalProducto,
                fechaCreacion: fechaFormateada,
                ultimaFecha: fechaFormateada,
                timestampCreacion: new Date().toISOString(),
                ordenSort: new Date().toISOString()
            };
        }
        
        // Actualizar total de la cuenta
        totalCuenta += totalProducto;
        
        // Agregar al historial
        const registroHistorial = {
            fecha: fechaFormateada,
            turno: idTurno,
            productos: [{
                nombre: nombreProducto,
                cantidad: cantidad,
                precioVenta: precioVenta,
                total: totalProducto
            }],
            subtotal: totalProducto,
            accion: 'AGREGADO MANUAL'
        };
        
        historialCuenta.push(registroHistorial);
        
        // Actualizar la cuenta
// console.log('📝 ACTUALIZANDO DOCUMENTO CON TRANSACTION...');
// console.log('📦 Productos finales:', productosCuenta);
// console.log('💰 Total final:', totalCuenta);
        
        transaction.update(cuentaRef, {
            productos: productosCuenta,
            total: totalCuenta,
            historial: historialCuenta,
            ultimaModificacion: fechaFormateada
        });
        
// console.log('✅ TRANSACTION UPDATE EJECUTADO');
    });
    
// console.log('✅ TRANSACTION COMPLETADA EXITOSAMENTE');
    
    } catch (error) {
        console.error('❌ ERROR EN agregarProductoACuentaEnBD:', error);
        console.error('❌ Código de error:', error.code);
        console.error('❌ Mensaje de error:', error.message);
        console.error('❌ Stack trace:', error.stack);
        throw error; // Re-lanzar el error
    }
}

// =====================================================
// FUNCIONES PARA MANEJO DE ABONOS
// =====================================================

/**
 * Procesa abono parcial para un cliente
 */
window.procesarAbonoCliente = async function(clienteId) {
    try {
        mostrarCargando('Cargando datos de la cuenta...');
        
        // Obtener datos actuales de la cuenta
        const cuentaRef = doc(db, "cuentasActivas", clienteId);
        const cuentaSnap = await getDoc(cuentaRef);
        
        if (!cuentaSnap.exists()) {
            cerrarModal();
            await mostrarError('Cuenta no encontrada');
            return;
        }
        
        const cuenta = cuentaSnap.data();
        
        // Verificar si puede recibir abonos
        if (!puedeRecibirAbono(cuenta)) {
            cerrarModal();
            await mostrarAdvertencia('Esta cuenta no puede recibir abonos');
            return;
        }
        
        cerrarModal();
        
        // Mostrar modal de abono
        const datosAbono = await mostrarModalAbono(cuenta.cliente, cuenta.total);
        
        if (datosAbono) {
            const exito = await procesarAbono(
                clienteId, 
                datosAbono.monto, 
                datosAbono.medioPago, 
                cuenta.total
            );
            
            if (exito) {
                // Recargar la vista de cuentas
                if (window.cargarCuentasAbiertas) {
                    window.cargarCuentasAbiertas();
                }
            }
        }
        
    } catch (error) {
        cerrarModal();
        console.error('Error procesando abono:', error);
        await mostrarError(`Error: ${error.message}`);
    }
};

/**
 * Actualiza la vista de una cuenta para mostrar historial de abonos
 */
async function actualizarVistaConHistorial(clienteId, contenidoHTML) {
    try {
        const historial = await obtenerHistorialAbono(clienteId);
        
        if (historial.length > 0) {
            const historialHTML = renderizarHistorialAbonos(historial);
            // Insertar el historial antes de los botones
            const botonesIndex = contenidoHTML.lastIndexOf('<div class="d-grid gap-2">');
            if (botonesIndex !== -1) {
                return contenidoHTML.slice(0, botonesIndex) + historialHTML + contenidoHTML.slice(botonesIndex);
            }
        }
        
        return contenidoHTML;
        
    } catch (error) {
        console.error('Error cargando historial de abonos:', error);
        return contenidoHTML;
    }
}







Engranaje.js

// JavaScript/Engranaje.js
// Archivo principal que maneja la lógica de cuentas activas y navegación

// Importaciones de módulos locales
import { obtenerResumenTurno, renderizarResumenTurno } from "./ResumenTurno.js";
import { formatearPrecio } from "./FormateoPrecios.js";
import { iniciarSesion, cerrarSesion as cerrarSesionAuth, verificarSesionAutomatica } from "./Autenticacion.js";
import { cargarInventario, ocultarInventario } from "./Inventario.js";
import { agregarAlCarrito, aumentarCantidad, disminuirCantidad, quitarDelCarrito, renderCarrito } from "./CarritoCompras.js";
import { realizarVenta } from "./VentasApp.js";
import { db } from './Conexion.js';
import { cargarDetalleCuenta } from "./Cuentas.js";

// IMPORTACIONES de Firebase
import { collection, onSnapshot, query, doc, updateDoc, getDocs } from 'https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js';
import { 
    mostrarPersonalizado, 
    cerrarModal, 
    mostrarConfirmacion, 
    mostrarCargando, 
    mostrarExito, 
    mostrarError,
    mostrarAdvertencia 
} from "./SweetAlertManager.js";

// **FUNCIÓN UTILITARIA PARA CONVERTIR idTurno A FECHA LEGIBLE**
function convertirIdTurnoAFecha(idTurno) {
    if (!idTurno || idTurno === 'Sin turno') return 'Sin fecha';
    
    try {
        // Formato esperado: "2025-9-7_10-18" 
        const partes = idTurno.split('_')[0]; // Tomar solo la parte de fecha: "2025-9-7"
        const [año, mes, dia] = partes.split('-');
        
        // Crear objeto Date
        const fecha = new Date(parseInt(año), parseInt(mes) - 1, parseInt(dia));
        
        // Formatear a español
        const opciones = { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        };
        
        return fecha.toLocaleDateString('es-ES', opciones);
    } catch (error) {
        console.error('Error al convertir idTurno a fecha:', error);
        return 'Fecha inválida';
    }
}

// Exportar funciones del carrito al ámbito global
// Redefinir agregarAlCarrito para limpiar buscador y ocultar inventario tras agregar
window.agregarAlCarrito = function(id, precioVenta) {
    agregarAlCarrito(id, precioVenta);
    // Limpiar buscador y ocultar inventario
    const campoBusqueda1 = document.getElementById("campoBusqueda1");
    if (campoBusqueda1) campoBusqueda1.value = "";
    ocultarInventario();
};
window.aumentarCantidad = aumentarCantidad;
window.disminuirCantidad = disminuirCantidad;
window.quitarDelCarrito = quitarDelCarrito;
window.renderCarrito = renderCarrito;
window.realizarVenta = () => realizarVenta(window.carrito);

// **FUNCIÓN PARA CARGAR CUENTAS ABIERTAS**
let debounceTimer = null;

function cargarCuentasAbiertas() {
    const q = query(collection(db, "cuentasActivas"));
    const container = document.getElementById('cuentasActivasTurno');
    const idTurno = localStorage.getItem("idTurno");
    const timestamp = new Date().toISOString().slice(-13, -5); // HH:MM:SS.mmm
    
    // console.log('🚀 [INICIAR CARGA CUENTAS] - Función cargarCuentasAbiertas iniciada - TIMESTAMP:', timestamp);
    // console.log('🆔 [TURNO DESDE localStorage] - Valor:', idTurno);
    // console.log('📅 [FORMATO TURNO] - Tipo:', typeof idTurno, '- Longitud:', idTurno?.length);
    if (!container) {
        console.error("El contenedor para las cuentas activas no fue encontrado.");
        return;
    }
    onSnapshot(q, async (querySnapshot) => {
        // Debounce para evitar actualizaciones muy frecuentes
        if (debounceTimer) {
            clearTimeout(debounceTimer);
        }
        
        debounceTimer = setTimeout(async () => {
        const execTimestamp = new Date().toISOString().slice(-13, -5);
        // console.log('🔄 [CARGAR CUENTAS ABIERTAS] - Ejecutándose... TIMESTAMP:', execTimestamp);
        // console.log('🆔 [TURNO ACTUAL] - localStorage:', idTurno);
        // console.log('📊 [TOTAL DOCUMENTOS] - Encontrados:', querySnapshot.size);
        
        let htmlContent = '';
        let pendientes = [];
        let activas = [];
        
        // Clasificar cuentas
        for (const docSnap of querySnapshot.docs) {
            const cuenta = docSnap.data();
            const clienteId = docSnap.id;
            
            // Filtrar el documento especial de historial de abonos
            if (clienteId === 'historial_abonos') {
                continue;
            }
            
            // console.log('👤 [PROCESANDO CUENTA]', clienteId, ':', {
            //     turnoEnCuenta: cuenta.turno,
            //     turnoActual: idTurno,
            //     tipoActual: cuenta.tipo,
            //     total: cuenta.total
            // });
            
            // Comparación de turnos
            const esTurnoAnterior = cuenta.turno && cuenta.turno !== idTurno;
            const noEsEnCuaderno = cuenta.tipo !== 'En cuaderno';
            
            // console.log('🔍 [COMPARACIÓN]', clienteId, ':', {
            //     turnoEnCuenta: cuenta.turno,
            //     turnoActual: idTurno,
            //     sonTurnosDiferentes: esTurnoAnterior,
            //     tipoActual: cuenta.tipo,
            //     noEsEnCuaderno: noEsEnCuaderno,
            //     DEBE_CONVERTIRSE: esTurnoAnterior && noEsEnCuaderno
            // });
            
            // 🚨 DETECCIÓN ESPECÍFICA PARA DEBUGGING (COMENTADO PARA PRODUCCIÓN)
            // if (clienteId === 'prueba3' && cuenta.tipo === 'En cuaderno') {
            //     console.error('🚨 [DETECTIVE] prueba3 YA ESTÁ EN CUADERNO - ¿QUIÉN LO CONVIRTIÓ?');
            //     console.error('🔍 [DETECTIVE] Datos de la cuenta:', {
            //         cliente: clienteId,
            //         tipoActual: cuenta.tipo,
            //         turnoEnCuenta: cuenta.turno,
            //         turnoActual: idTurno,
            //         timestamp: execTimestamp,
            //         stackTrace: new Error().stack
            //     });
            // }
            
            // Lógica corregida: solo actualizar cuentas de turnos anteriores
            if (esTurnoAnterior && noEsEnCuaderno) {
                // console.log('⚠️ [CONVERSIÓN AUTOMÁTICA] TIMESTAMP:', execTimestamp, '-', clienteId, '- DE:', cuenta.tipo, '→ A: "En cuaderno"');
                // console.log('🔍 [CONVERSIÓN - DETALLES]', clienteId, ':', {
                //     turnoEnCuenta: cuenta.turno,
                //     turnoActual: idTurno,
                //     tipoOriginal: cuenta.tipo,
                //     ejecutor: 'cargarCuentasAbiertas',
                //     timestamp: execTimestamp
                // });
                try {
                    await updateDoc(doc(collection(db, "cuentasActivas"), clienteId), { tipo: 'En cuaderno' });
                    cuenta.tipo = 'En cuaderno';
                    // console.log('✅ [CONVERSIÓN EXITOSA] TIMESTAMP:', execTimestamp, '-', clienteId, '- Actualizada en Firebase');
                } catch (error) {
                    console.error('❌ [ERROR CONVERSIÓN] TIMESTAMP:', execTimestamp, '-', clienteId, '- Error:', error);
                }
            } else {
                // console.log('🟢 [SIN CAMBIOS] TIMESTAMP:', execTimestamp, '-', clienteId, '- Mantiene tipo:', cuenta.tipo);
            }
            
            // Clasificar cuentas: las del turno actual van a activas, el resto a pendientes
            if (cuenta.turno === idTurno && cuenta.tipo !== 'En cuaderno') {
                activas.push({ ...cuenta, id: clienteId });
                // console.log('✅ ACTIVA:', clienteId, '- Turno:', cuenta.turno, '- Tipo:', cuenta.tipo);
            } else {
                pendientes.push({ ...cuenta, id: clienteId });
                // console.log('🟡 PENDIENTE:', clienteId, '- Turno:', cuenta.turno, '- Tipo:', cuenta.tipo);
            }
        }
        
        // console.log('📊 RESUMEN - Activas:', activas.length, 'Pendientes:', pendientes.length);
        
        // Mostrar nota si hay pendientes
        if (pendientes.length > 0) {
            htmlContent += `
                <div class="alert alert-warning text-center p-4 mb-3 alert-clickable" onclick="window.mostrarCuentasPendientes()">
                    <h5>📋 Cuentas Pendientes Hay <strong>${pendientes.length}</strong></h5>
                    <small class="text-muted">👆 Toca aquí para revisarlas</small>
                </div>
            `;
            // console.log('🟡 Agregado HTML de pendientes mejorado');
        }
        
        // Actualizar variable global para consistencia
        window._cuentasPendientes = pendientes;
        if (activas.length === 0) {
            htmlContent += `
                <div class="alert alert-info text-center p-4 mb-3">
                    <p class="mb-2">Aun No hay clientes en el local .</p>
                    <small class="text-muted">Paciencia...</small>
                </div>
            `;
            // console.log('ℹ️ Agregado mensaje mejorado: No hay cuentas activas');
        } else {
            htmlContent += '<div class="list-group">';
            // console.log('📋 Generando lista para', activas.length, 'cuentas activas');
            activas.forEach((cuenta) => {
                const totalFormateado = formatearPrecio(cuenta.total);
                
                // Usar SIEMPRE el campo cliente de la base de datos
                const nombreMostrar = cuenta.cliente || cuenta.id;
                // console.log('📄 Mostrando cliente:', cuenta.id, '→', nombreMostrar);
                
                htmlContent += `
                    <div class="list-group-item d-flex justify-content-between align-items-center" 
                         onclick="mostrarDetalleCuenta('${cuenta.id}')"> 
                         <div>
                            <h6 class="mb-0">${nombreMostrar}</h6>
                            <small class="text-muted">${cuenta.tipo}</small>
                        </div>
                        <span class="badge bg-success rounded-pill fs-6">
                            ${totalFormateado}
                        </span>
                    </div>
                `;
            });
            htmlContent += '</div>';
            // console.log('✅ Lista de activas generada');
        }
        
        // console.log('📝 HTML final length:', htmlContent.length);
        // console.log('📝 HTML preview (primeros 200 chars):', htmlContent.substring(0, 200));
        // console.log('🎯 Container encontrado:', !!container);
        // console.log('🎯 Container ID:', container?.id);
        
        container.innerHTML = htmlContent;
        // console.log('✅ innerHTML asignado - contenido actualizado');
        
        // Verificar que realmente se asignó
        setTimeout(() => {
            // console.log('🔍 Verificación post-asignación - container.innerHTML length:', container.innerHTML.length);
        }, 100);
        
        }, 300); // Debounce de 300ms
    });
}
// Mostrar cuentas pendientes en containerPendientes
window.mostrarCuentasPendientes = function() {
    // console.log('🔵 Mostrando cuentas pendientes...');
    
    // FORZAR ocultación de TODOS los containers específicamente
    const todosLosContainers = ['container', 'container1', 'container2', 'container3', 'containerPendientes', 'containerResumenTurno'];
    
    todosLosContainers.forEach(containerId => {
        const elemento = document.getElementById(containerId);
        if (elemento) {
            // Remover todas las clases de visibilidad
            elemento.classList.remove('js-visible', 'd-block', 'container-visible', 'd-block-force');
            // Agregar todas las clases de ocultación
            elemento.classList.add('js-hidden', 'd-none');
            // console.log(`🔍 ${containerId} ocultado - clases:`, elemento.className);
        }
    });
    
    // MOSTRAR específicamente containerPendientes con máxima prioridad
    const containerPendientes = document.getElementById('containerPendientes');
    if (containerPendientes) {
        containerPendientes.classList.remove('js-hidden', 'd-none');
        containerPendientes.classList.add('js-visible', 'd-block', 'container-visible');
        // console.log('✅ Container pendientes mostrado');
        // console.log('🔍 Clases finales containerPendientes:', containerPendientes.className);
    }
    
    const container = document.getElementById('cuentasPendientesTurno');
    if (!container) {
        console.error("🔴 Contenedor cuentasPendientesTurno no encontrado");
        mostrarError('Error', 'No se encontró el contenedor de cuentas pendientes');
        return;
    }
    
    const pendientes = window._cuentasPendientes || [];
    let htmlContent = '';
    
    if (pendientes.length === 0) {
        htmlContent = `
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle"></i> No hay cuentas pendientes por cobrar.
                <br><small>Las cuentas "En cuaderno" y de turnos anteriores aparecerán aquí.</small>
                <br><br><button class="btn btn-primary" onclick="mostrarContainer('container2')">
                    Ir a Cuentas Activas para actualizar
                </button>
            </div>
        `;
    } else {
        htmlContent = `
            <div class="alert alert-warning">
                <strong>📋 ${pendientes.length} cuenta(s) pendiente(s) encontrada(s)</strong>
                <br><!--<small>Incluye cuentas "En cuaderno" y de turnos anteriores</small>-->
            </div>
            <div class="list-group">
        `;
        
        pendientes.forEach((cuenta) => {
            const totalFormateado = formatearPrecio(cuenta.total || 0);
            const turnoInfo = cuenta.turno ? convertirIdTurnoAFecha(cuenta.turno) : 'Sin fecha';
            const tipoClase = cuenta.tipo === 'En cuaderno' ? 'text-warning' : 'text-muted';
            
            // Usar SIEMPRE el campo cliente de la base de datos
            const nombreMostrar = cuenta.cliente || cuenta.id || 'Cliente sin nombre';
            // console.log('📄 Mostrando cliente (pendientes):', cuenta.id, '→', nombreMostrar);
            
            htmlContent += `
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" 
                     onclick="mostrarDetalleCuenta('${cuenta.id}')" class="cuenta-row-clickable"> 
                     <div>
                        <h6 class="mb-1">${nombreMostrar}</h6>
                        <p class="mb-1 ${tipoClase}"><strong>${cuenta.tipo || 'Sin tipo'}</strong></p>
                        <small class="text-muted">${turnoInfo}</small>
                    </div>
                    <span class="badge bg-success rounded-pill fs-6">
                        ${totalFormateado}
                    </span>
                </div>
            `;
        });
        htmlContent += '</div>';
    }
    container.innerHTML = htmlContent;
};

// Evento que se dispara cuando el DOM está completamente cargado
document.addEventListener("DOMContentLoaded", async function () {
    // console.log("🔄 Verificando sesión automáticamente...");
    
    // CONFIGURACIÓN DE ELEMENTOS DE INTERFAZ (SIEMPRE SE EJECUTA)
    const emailInput = document.getElementById("emailinicio");
    const passwordInput = document.getElementById("passwordinicio");
    const recordarCheckbox = document.getElementById("recordarDatos");
    const btnIniciarSesion = document.getElementById("btnIniciarSesion");
    const container = document.getElementById("container");
    const container1 = document.getElementById("container1");
    const loginForm = document.getElementById("loginForm");
    const loginButton = document.getElementById("loginButton");
    const closeButton = document.getElementById("closeButton");
    const campoBusqueda1 = document.getElementById("campoBusqueda1");

    // Configurar eventos del buscador SIEMPRE - NUEVO MODAL INTUITIVO
    if (campoBusqueda1) {
        // Convertir el campo de búsqueda en solo lectura y hacer que abra el modal
        campoBusqueda1.readOnly = true;
        campoBusqueda1.placeholder = "🔍 Toca aquí para buscar productos...";
        campoBusqueda1.style.cursor = "pointer";
        
        // Remover eventos antiguos y agregar el nuevo
        campoBusqueda1.removeEventListener("input", cargarInventario);
        
        // SOLO evento click - evitar duplicación con focus
        campoBusqueda1.addEventListener("click", function(e) {
            e.preventDefault(); // Prevenir comportamiento por defecto
            e.stopPropagation(); // Evitar propagación
            
            // FORZAR BLUR inmediato para evitar focus pegado
            this.blur();
            
            // Pequeño delay para asegurar que el blur se aplique
            setTimeout(() => {
                abrirModalBusquedaCarrito();
            }, 50);
        });
        
        // Evento adicional para prevenir focus accidental
        campoBusqueda1.addEventListener("focus", function(e) {
            this.blur(); // Quitar focus inmediatamente
        });
        
        // console.log("✅ Nuevo sistema de búsqueda modal configurado");
    } else {
        console.warn("⚠️ Campo de búsqueda no encontrado");
    }

    // Cargar datos guardados
    if (localStorage.getItem("recordar") === "true") {
        if (emailInput) emailInput.value = localStorage.getItem("email") || "";
        if (passwordInput) passwordInput.value = localStorage.getItem("password") || "";
        if (recordarCheckbox) recordarCheckbox.checked = true;
    }

    // Eventos del formulario de login
    if (loginButton) {
        // console.log('✅ Event listener del loginButton configurado');
        loginButton.addEventListener('click', function(e) {
            e.preventDefault();
            // console.log('🔵 LoginButton clickeado - mostrando formulario');
            
            if (loginForm) {
                loginForm.classList.remove('js-hidden', 'd-none');
                loginForm.classList.add('js-visible', 'd-block');
                // console.log('✅ Formulario mostrado');
            }
            
            loginButton.classList.add('js-hidden');
            // console.log('✅ Botón ocultado');
        });
    } else {
        console.error('🔴 No se encontró loginButton');
    }

    if (closeButton) {
        closeButton.addEventListener('click', function(e) {
            e.preventDefault();
            // console.log('🔵 CloseButton clickeado - ocultando formulario');
            
            if (loginForm) {
                loginForm.classList.add('js-hidden', 'd-none');
                loginForm.classList.remove('js-visible', 'd-block');
                // console.log('✅ Formulario ocultado');
            }
            
            if (loginButton) {
                loginButton.classList.remove('js-hidden');
                loginButton.classList.add('js-inline-block');
                // console.log('✅ Botón mostrado');
            }
        });
    }

    // Evento de inicio de sesión
    if (btnIniciarSesion) {
        btnIniciarSesion.addEventListener("click", async function () {
            const email = emailInput?.value.trim();
            const password = passwordInput?.value.trim();
            const recordar = recordarCheckbox?.checked;

            try {
                await iniciarSesion(email, password, recordar);
                
                // Solo ejecutar esto si el login fue exitoso
                // console.log('✅ Login exitoso, redirigiendo...');
                
                if (container) {
                    container.classList.add('js-hidden');
                    container.classList.remove('js-visible');
                }
                if (loginForm) {
                    loginForm.classList.add('js-hidden', 'd-none');
                    loginForm.classList.remove('js-visible', 'd-block');
                }
                
                mostrarContainer('container2');
                
                // Actualizar UI con información del usuario
                const usuarioActualElement = document.getElementById('usuarioActual');
                if (usuarioActualElement) {
                    usuarioActualElement.textContent = email;
                }
                
                // cargarCuentasAbiertas(); // 🚫 COMENTADO - evitar múltiples listeners
            } catch (error) {
                console.error("🔴 Fallo al iniciar sesión:", error);
                // NO redirigir si hay error - el usuario se queda en la pantalla de login
                // console.log('🔴 Login falló, manteniendo pantalla de login');
                // El error ya fue mostrado por la función iniciarSesion
            }
        });
    }
    
    // VERIFICACIÓN AUTOMÁTICA DE SESIÓN (DESPUÉS DE CONFIGURAR EVENTOS)
    try {
        const estadoSesion = await verificarSesionAutomatica();
        
        if (estadoSesion.autenticado && estadoSesion.turnoActivo) {
            // Usuario autenticado con turno activo - ir directo a container2
            // console.log("✅ Sesión y turno activos - redirigiendo a cuentas");
            mostrarContainer('container2');
            
            // Actualizar UI con información del usuario
            const usuarioActualElement = document.getElementById('usuarioActual');
            if (usuarioActualElement) {
                usuarioActualElement.textContent = estadoSesion.usuario;
            }
            
            // cargarCuentasAbiertas(); // 🚫 COMENTADO - evitar múltiples listeners
            
        } else if (estadoSesion.autenticado && !estadoSesion.turnoActivo) {
            // Usuario autenticado pero sin turno activo - mostrar aviso y login
            // console.log("⚠️ Usuario autenticado pero sin turno activo");
            mostrarPersonalizado({
                icon: 'info',
                title: 'Sesión Recuperada',
                text: 'Tu sesión está activa, pero necesitas iniciar un nuevo turno',
                confirmButtonText: 'Iniciar Turno'
            });
            mostrarContainer('container');
            
        } else {
            // No autenticado - mostrar login
            // console.log("❌ No hay sesión activa - mostrar login");
            mostrarContainer('container');
        }
        
    } catch (error) {
        console.error("Error al verificar sesión automática:", error);
        mostrarContainer('container');
    }
});

// Función para cambiar entre contenedores (expuesta globalmente)
function mostrarContainer(idMostrar) {
    // console.log('🔵 mostrarContainer llamado con:', idMostrar);
    
    // Verificar que el elemento existe
    const elementoDestino = document.getElementById(idMostrar);
    if (!elementoDestino) {
        console.error('🔴 ERROR: No se encontró el elemento con ID:', idMostrar);
        return;
    }
    
    // console.log('✅ Elemento encontrado:', elementoDestino);
    
    // OCULTAR TODOS los containers - usando solo clases CSS
    document.querySelectorAll('.container, .container1, .container2, .container3, .containerPendientes, .containerResumenTurno').forEach(el => {
        el.classList.add('js-hidden', 'd-none');
        el.classList.remove('js-visible', 'd-block', 'container-visible');
    });
    
    // MOSTRAR el container destino - usando solo clases CSS
    elementoDestino.classList.remove('js-hidden', 'd-none');
    elementoDestino.classList.add('js-visible', 'd-block', 'container-visible');
    
    // console.log('✅ Container mostrado:', idMostrar);
    // console.log('🔍 Clases finales:', elementoDestino.className);
    
    if (idMostrar === "container1") {
        // console.log('🔵 Inicializando container1...');
        ocultarInventario();
        renderCarrito();
    }
    if (idMostrar === "container2") {
        // console.log('🔵 Inicializando container2 - cargando cuentas abiertas...');
        try {
            cargarCuentasAbiertas();
            // console.log('✅ cargarCuentasAbiertas() ejecutado');
        } catch (error) {
            console.error('🔴 ERROR en cargarCuentasAbiertas():', error);
        }
    }
    if (idMostrar === "containerPendientes") {
        // Si no hay cuentas pendientes cargadas, ir primero a cargar las cuentas activas
        if (!window._cuentasPendientes || window._cuentasPendientes.length === 0) {
            // console.log("No hay cuentas pendientes cargadas, cargando primero las cuentas activas...");
            // 🚫 COMENTADO - evitar múltiples listeners
            // cargarCuentasAbiertas(); 
            // Esperar un momento y luego mostrar pendientes
            setTimeout(() => {
                window.mostrarCuentasPendientes();
            }, 1000);
        } else {
            window.mostrarCuentasPendientes();
        }
    }
    if (idMostrar === "containerResumenTurno") {
        // Mostrar resumen del turno en curso
        const idTurno = localStorage.getItem("idTurno");
        if (idTurno) {
            obtenerResumenTurno(idTurno).then(resumen => {
                renderizarResumenTurno(resumen, 'resumenTurnoContent');
            });
        }
    }
};

// Función para cerrar sesión (expuesta globalmente)
async function cerrarSesion() {
    // console.log('🔵 Iniciando proceso de cierre de sesión...');
    
    const confirmacion = await mostrarConfirmacion(
        '¿Cerrar Sesión?',
        '¿Estás seguro de que deseas cerrar la sesión actual?',
        'Sí, cerrar',
        'Cancelar'
    );
    
    if (confirmacion.isConfirmed) {
        mostrarCargando('Cerrando sesión...');
        
        try {
            await cerrarSesionAuth(); // Se llama a la función importada de Autenticacion.js
            
            // Oculta todos los containers y muestra el de inicio
            document.querySelectorAll('.container, .container1, .container2, .container3, .containerPendientes, .containerResumenTurno').forEach(el => {
                el.classList.add('js-hidden', 'd-none');
                el.classList.remove('js-visible', 'd-block', 'container-visible');
            });
            
            const containerInicio = document.getElementById('container');
            containerInicio.classList.remove('js-hidden', 'd-none');
            containerInicio.classList.add('js-visible', 'd-block', 'container-visible');
            
            // FORZAR VISIBILIDAD del formulario de login
            const loginButton = document.getElementById('loginButton');
            const loginForm = document.getElementById('loginForm');
            
            if (loginButton) {
                loginButton.classList.remove('js-hidden');
                loginButton.classList.add('js-inline-block', 'js-visibility-visible');
            }
            
            if (loginForm) {
                loginForm.classList.add('js-hidden', 'd-none');
                loginForm.classList.remove('js-visible', 'd-block');
            }
            
            cerrarModal();
            mostrarExito('Sesión cerrada correctamente');
            
            // console.log('✅ Sesión cerrada exitosamente');
        } catch (error) {
            cerrarModal();
            mostrarError('Error al cerrar sesión', error.message);
            console.error('🔴 Error cerrando sesión:', error);
        }
    }
};

// Función para mostrar el detalle de una cuenta (expuesta globalmente)
function mostrarDetalleCuenta(clienteId) {
    mostrarContainer('container3');
    cargarDetalleCuenta(clienteId);
};

/**
 * Muestra el modal unificado de selección de medio de pago
 * @param {number} total - El total a mostrar en el modal
 * @returns {Promise<string|null>} El medio de pago seleccionado o null si se canceló
 */
export async function mostrarModalMedioPago(total) {
    const totalFormateado = formatearPrecio(total);
    
    // Obtener template del HTML
    const template = document.getElementById('modalMediosPagoTemplate');
    const modalHTML = template ? template.innerHTML : '';

    const { value: medioPago } = await mostrarPersonalizado({
        title: '💳 Seleccionar Medio de Pago',
        text: `Total a pagar: ${totalFormateado}`,
        html: modalHTML,
        showConfirmButton: false,
        showCancelButton: true,
        cancelButtonText: 'Cancelar',
        allowOutsideClick: false,
        didOpen: () => {
            // Función temporal para manejar la selección
            window.seleccionarMedioPagoModal = (pago) => {
                cerrarModal();
                window.medioPagoSeleccionadoModal = pago;
            };
        },
        willClose: () => {
            // Limpiar función temporal
            delete window.seleccionarMedioPagoModal;
        }
    });

    const medioPagoFinal = window.medioPagoSeleccionadoModal;
    delete window.medioPagoSeleccionadoModal;
    
    return medioPagoFinal;
}

// Variable para prevenir apertura múltiple
let modalBusquedaAbierto = false;

// **FUNCIÓN PARA ABRIR MODAL DE BÚSQUEDA INTUITIVO PARA EL CARRITO**
window.abrirModalBusquedaCarrito = async function() {
    // Prevenir apertura múltiple
    if (modalBusquedaAbierto) {
        // console.log('🛑 Modal ya está abierto, ignorando nueva apertura');
        return;
    }
    
    try {
        modalBusquedaAbierto = true;
        await mostrarModalBusquedaCarrito();
    } catch (error) {
        mostrarError(`Error al abrir búsqueda de productos: ${error.message}`);
        console.error("Error abrirModalBusquedaCarrito:", error);
    } finally {
        modalBusquedaAbierto = false;
    }
};

// **FUNCIÓN PARA MOSTRAR MODAL DE BÚSQUEDA PARA CARRITO**
async function mostrarModalBusquedaCarrito() {
    // Generar ID único para evitar conflictos entre modales
    const modalId = 'searchProductoCarrito_' + Date.now();
    const resultadosId = 'resultadosProductosCarrito_' + Date.now();
    
    const resultado = await mostrarPersonalizado({
        title: '🛒 Buscar Productos para Carrito',
        html: `
            <div class="text-start mb-3">
                <p class="text-muted small">Escriba el nombre del producto que desea agregar al carrito</p>
            </div>
            <input type="text" id="${modalId}" class="swal2-input" placeholder="Escriba el nombre del producto..." style="font-size: 1.1rem;">
            <div id="${resultadosId}" class="mt-3" style="max-height: 400px; overflow-y: auto;">
                <p class="text-muted">Escriba para buscar productos...</p>
            </div>
        `,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonText: 'Cerrar',
        cancelButtonText: 'Cancelar',
        allowOutsideClick: false,
        width: '600px',
        didOpen: () => {
            const input = document.getElementById(modalId);
            const resultados = document.getElementById(resultadosId);
            
            if (input && resultados) {
                // Listener para búsqueda en tiempo real - función nueva cada vez
                const buscarHandler = async (e) => {
                    await buscarProductosParaCarrito(e.target.value, resultados);
                };
                
                input.addEventListener('input', buscarHandler);
                
                // Enfocar el campo de búsqueda
                input.focus();
            }
        },
        willClose: () => {
            // Limpiar cualquier referencia al cerrar
            const input = document.getElementById(modalId);
            if (input) {
                input.removeEventListener('input', buscarProductosParaCarrito);
            }
            // Resetear flag de modal abierto
            modalBusquedaAbierto = false;
        }
    });
}

// **FUNCIÓN PARA BUSCAR PRODUCTOS PARA EL CARRITO**
async function buscarProductosParaCarrito(termino, resultadosDiv) {
    if (!termino.trim()) {
        resultadosDiv.innerHTML = '<p class="text-muted">Escriba para buscar productos...</p>';
        return;
    }
    
    try {
        resultadosDiv.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div><br>Buscando...</div>';
        
        const inventarioRef = collection(db, "inventario");
        const snapshot = await getDocs(inventarioRef);
        
        const productos = [];
        const terminoLower = termino.toLowerCase();
        
        snapshot.forEach(doc => {
            const nombreProducto = doc.id.toLowerCase();
            if (nombreProducto.includes(terminoLower)) {
                const data = doc.data();
                productos.push({
                    id: doc.id,
                    nombre: doc.id,
                    precio: data.precioVenta || 0,
                    cantidad: data.cantidad || 0
                });
            }
        });
        
        if (productos.length === 0) {
            resultadosDiv.innerHTML = '<p class="text-warning">No se encontraron productos con ese nombre.</p>';
            return;
        }
        
        let html = '<div class="list-group">';
        productos.forEach(producto => {
            const precio = formatearPrecio(producto.precio);
            html += `
                <button type="button" class="list-group-item list-group-item-action text-start d-flex justify-content-between align-items-center" 
                        onclick="seleccionarProductoParaCarrito('${producto.id}', ${producto.precio})"
                        style="min-height: 60px; border-left: 3px solid #28a745;">
                    <div>
                        <div class="fw-bold" style="color: #333; font-size: 1rem;">${producto.nombre}</div>
                        <small style="color: #ffffff; font-size: 0.85rem;">Stock: ${producto.cantidad} disponibles</small>
                    </div>
                    <div class="text-end">
                        <div class="fw-bold" style="color: #fff; background: #28a745; padding: 4px 8px; border-radius: 4px; font-size: 1rem;">${precio}</div>
                        <small style="color: #28a745; font-weight: bold; font-size: 0.8rem;">por unidad</small>
                    </div>
                </button>
            `;
        });
        html += '</div>';
        
        resultadosDiv.innerHTML = html;
        
    } catch (error) {
        resultadosDiv.innerHTML = '<p class="text-danger">Error al buscar productos.</p>';
        console.error('Error buscando productos para carrito:', error);
    }
}

// **FUNCIÓN PARA SELECCIONAR PRODUCTO Y AGREGARLO AL CARRITO**
window.seleccionarProductoParaCarrito = async function(nombreProducto, precioVenta) {
    try {
        // PASO 1: Agregar el producto al carrito PRIMERO
        window.agregarAlCarrito(nombreProducto, precioVenta);
        
        // PASO 2: Resetear flag de modal y cerrar
        modalBusquedaAbierto = false;
        cerrarModal();
        
        // PASO 3: Limpiar el campo de búsqueda para el próximo uso
        const campoBusqueda1 = document.getElementById("campoBusqueda1");
        if (campoBusqueda1) {
            campoBusqueda1.blur(); // Quitar focus del campo
        }
        
    } catch (error) {
        modalBusquedaAbierto = false; // Resetear en caso de error
        mostrarError(`Error al agregar producto al carrito: ${error.message}`);
        console.error("Error seleccionarProductoParaCarrito:", error);
    }
};

// Exportar funciones globales para que puedan ser accedidas desde el HTML
window.cerrarSesion = cerrarSesion;
window.mostrarContainer = mostrarContainer;
window.mostrarDetalleCuenta = mostrarDetalleCuenta;

// Funciones globales para historial de abonos
window.mostrarHistorialAbonosGeneral = async function() {
    try {
        mostrarCargando('Cargando historial de abonos...');
        
        // Importar funciones necesarias
        const { obtenerClientesConAbonos } = await import('./Abonos.js');
        const { mostrarModalClientesConAbonos } = await import('./SweetAlertManager.js');
        
        const clientesConAbonos = await obtenerClientesConAbonos();
        
        cerrarModal();
        await mostrarModalClientesConAbonos(clientesConAbonos);
        
    } catch (error) {
        cerrarModal();
        mostrarError('Error al cargar historial de abonos', error.message);
        console.error('Error en mostrarHistorialAbonosGeneral:', error);
    }
};

window.verHistorialCliente = async function(clienteId, nombreCliente) {
    try {
        mostrarCargando('Cargando historial del cliente...');
        
        // Importar funciones necesarias
        const { obtenerHistorialAbono } = await import('./Abonos.js');
        const { mostrarModalHistorialCliente } = await import('./SweetAlertManager.js');
        
        const historialAbonos = await obtenerHistorialAbono(clienteId);
        
        cerrarModal();
        await mostrarModalHistorialCliente(historialAbonos, nombreCliente);
        
    } catch (error) {
        cerrarModal();
        mostrarError('Error al cargar historial del cliente', error.message);
        console.error('Error en verHistorialCliente:', error);
    }
};




formatearPrecio.js

// FormateoPrecios.js - Módulo centralizado para formateo de precios
// Versión: 1.0.0
// Propósito: Centralizar el formateo de moneda en todo el proyecto

/**
 * Formatea un número como precio en pesos colombianos
 * @param {number|string} precio - El precio a formatear
 * @param {boolean} incluirSimbolo - Si incluir el símbolo $ (por defecto true)
 * @returns {string} - Precio formateado como "$ 20.000"
 */
export function formatearPrecio(precio, incluirSimbolo = true) {
    // Convertir a número si es string
    const numero = typeof precio === 'string' ? parseFloat(precio) : precio;
    
    // Validar que sea un número válido
    if (isNaN(numero)) {
        return incluirSimbolo ? '$ 0' : '0';
    }
    
    // Formatear con separadores de miles y sin decimales
    const precioFormateado = new Intl.NumberFormat('es-CO', {
        style: 'decimal',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
        useGrouping: true
    }).format(numero);
    
    // Retornar con o sin símbolo según se requiera
    return incluirSimbolo ? `$ ${precioFormateado}` : precioFormateado;
}

/**
 * Formatea múltiples precios en un objeto
 * @param {Object} objeto - Objeto con propiedades que contienen precios
 * @param {Array} campos - Array con nombres de campos a formatear
 * @returns {Object} - Objeto con campos formateados
 */
export function formatearPreciosObjeto(objeto, campos) {
    const objetoFormateado = { ...objeto };
    
    campos.forEach(campo => {
        if (objetoFormateado[campo] !== undefined) {
            objetoFormateado[campo] = formatearPrecio(objetoFormateado[campo]);
        }
    });
    
    return objetoFormateado;
}

/**
 * Extrae el valor numérico de un precio formateado
 * @param {string} precioFormateado - Precio en formato "$ 20.000"
 * @returns {number} - Valor numérico del precio
 */
export function extraerValorPrecio(precioFormateado) {
    if (typeof precioFormateado !== 'string') {
        return parseFloat(precioFormateado) || 0;
    }
    
    // Remover símbolo $ y espacios, luego convertir puntos a vacío
    const numeroLimpio = precioFormateado
        .replace(/[$\s]/g, '')
        .replace(/\./g, '')
        .replace(/,/g, '.');
    
    return parseFloat(numeroLimpio) || 0;
}

/**
 * Valida si un string es un precio válido
 * @param {string} precio - String a validar
 * @returns {boolean} - True si es un precio válido
 */
export function esPrecionValido(precio) {
    const numero = extraerValorPrecio(precio);
    return !isNaN(numero) && numero >= 0;
}

// Configuración global para el proyecto
export const CONFIGURACION_PRECIOS = {
    simbolo: '$',
    separadorMiles: '.',
    locale: 'es-CO',
    decimales: 0
};

// Función de compatibilidad con el formato anterior
export function migrarFormatoAnterior(precioAnterior) {
    // Para precios que vengan en formato "20.000,00" o "$ 20.000,00"
    if (typeof precioAnterior === 'string') {
        const numeroLimpio = precioAnterior
            .replace(/[$\s]/g, '')
            .replace(/\./g, '')
            .replace(/,\d{2}$/, ''); // Remover ,00 al final
        
        return formatearPrecio(parseFloat(numeroLimpio));
    }
    
    return formatearPrecio(precioAnterior);
}

// console.log('📊 Módulo FormateoPrecios cargado - Formato: "$ 20.000"');




Inventario.js

//JavaScript/inventario.js
//Este archivo contiene la lógica para cargar, filtrar y mostrar el inventario de productos.
import { getFirestore, collection, getDocs } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";
import { app } from "./Conexion.js";

const db = getFirestore(app);

/**
 * Carga y muestra el inventario de productos en la interfaz.
 * @param {string} filtro - Filtro de búsqueda para los productos.
 */

export async function cargarInventario(filtro = "") {
    const resultadoDiv = document.getElementById("resultadoBusqueda1");
    if (!resultadoDiv) {
        console.error('🔴 No se encontró el elemento resultadoBusqueda1');
        return;
    }

    // Mostrar u ocultar inventario según el filtro
    if (!filtro.trim()) {
        resultadoDiv.classList.add("js-hidden", "d-none");
        resultadoDiv.classList.remove("js-visible", "d-block");
        resultadoDiv.innerHTML = "";
        return;
    } else {
        resultadoDiv.classList.remove("js-hidden", "d-none");
        resultadoDiv.classList.add("js-visible", "d-block");
    }
    resultadoDiv.innerHTML = "Cargando...";

    try {
        // console.log('🔵 Cargando inventario con filtro:', filtro);
        const inventarioRef = collection(db, "inventario");
        const snapshot = await getDocs(inventarioRef);
        // console.log('✅ Documentos obtenidos:', snapshot.size);

        let html = `
            <!-- Cabecera animada del inventario -->
            <div class="inventario-header">
                <img src="./pngs/busqueda.gif" alt="Búsqueda de Inventario" class="inventario-gif" />
                <h5 class="inventario-titulo">📦 Inventario de Productos</h5>
            </div>
            
            <div class="table-responsive inventario-table-container">
            <table class="table table-striped table-bordered inventario-fija">
                <thead>
                    <tr>
                        <th>PRODUCTOS</th>
                        <th>PRECIO</th>
                        <th>CANTIDAD</th>
                        <th>VENCIMIENTO</th>
                    </tr>
                </thead>
                <tbody>
        `;

        let hayResultados = false;
        const filtroLower = filtro.trim().toLowerCase();

        snapshot.forEach(doc => {
            if (!filtroLower || doc.id.toLowerCase().includes(filtroLower)) {
                const data = doc.data();
                hayResultados = true;
                html += `
                    <tr class="inventario-row-clickable" onclick="window.agregarAlCarrito('${doc.id}', ${data.precioVenta})">
                        <td>${doc.id}</td>
                        <td>${data.precioVenta !== undefined ? data.precioVenta : "-"}</td>
                        <td>${data.cantidad !== undefined ? data.cantidad : "-"}</td>
                        <td>${data.fechaVencimiento || "-"}</td>
                    </tr>
                `;
            }
        });

        html += `
                </tbody>
            </table>
            </div>
        `;
    resultadoDiv.innerHTML = hayResultados ? html : "No hay resultados.";
    } catch (error) {
        resultadoDiv.innerHTML = "Error al cargar inventario.";
        console.error('🔴 Error cargando inventario:', error);
        // Remover dependencia de SweetAlert temporalmente
        alert('Error al cargar inventario: ' + error.message);
    }
}

// Función para ocultar el inventario desde otros módulos
export function ocultarInventario() {
    const resultadoDiv = document.getElementById("resultadoBusqueda1");
    if (resultadoDiv) {
        resultadoDiv.classList.add("js-hidden", "d-none");
        resultadoDiv.classList.remove("js-visible", "d-block");
        resultadoDiv.innerHTML = "";
        // console.log('✅ Inventario ocultado');
    }
}




ResumenTurno.js

// ResumenTurno.js
// Módulo para obtener y mostrar el resumen de ventas del turno en curso
import { db } from './Conexion.js';
import { formatearPrecio } from './FormateoPrecios.js';
import { doc, getDoc, collection, getDocs, query, where } from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";

/**
 * Formatea una fecha a formato abreviado (DD/MM HH:mm)
 * @param {string|Date} fecha 
 * @returns {string}
 */
function formatearFechaAbreviada(fecha) {
    if (!fecha) return 'N/A';
    
    try {
        const d = typeof fecha === 'string' ? new Date(fecha) : fecha;
        return d.toLocaleDateString('es-CO', { 
            day: '2-digit', 
            month: '2-digit', 
            hour: '2-digit', 
            minute: '2-digit' 
        }).replace(',', '');
    } catch (error) {
        return 'Fecha inválida';
    }
}

/**
 * Obtiene y calcula el resumen del turno en curso
 * @param {string} idTurno
 * @returns {Promise<Object>} resumen
 */
export async function obtenerResumenTurno(idTurno) {
    // console.log('=== INICIANDO RESUMEN PARA TURNO:', idTurno, '===');
    
    // 1. Obtener ventas cerradas del turno
    const cuentasCerradasRef = doc(db, 'cuentasCerradas', idTurno);
    const cuentasCerradasSnap = await getDoc(cuentasCerradasRef);
    const cuentasCerradas = cuentasCerradasSnap.exists() ? cuentasCerradasSnap.data().clientes || [] : [];

    // 2. Obtener cuentas activas del turno específico
    const cuentasActivasRef = collection(db, 'cuentasActivas');
    const q = query(cuentasActivasRef, where('turno', '==', idTurno));
    const cuentasSnap = await getDocs(q);
    const cuentasActivasDelTurno = [];
    cuentasSnap.forEach(doc => {
        // Filtrar el documento especial de historial de abonos
        if (doc.id !== 'historial_abonos') {
            cuentasActivasDelTurno.push({ id: doc.id, ...doc.data() });
        }
    });
    
    // console.log('Cuentas activas del turno encontradas:', cuentasActivasDelTurno.length);

    // 3. TAMBIÉN obtener TODAS las cuentas "En cuaderno" (sin filtrar por turno)
    const todasCuentasRef = collection(db, 'cuentasActivas');
    const qTodas = query(todasCuentasRef, where('tipo', '==', 'En cuaderno'));
    const todasCuentasSnap = await getDocs(qTodas);
    const todasCuentasEnCuaderno = [];
    todasCuentasSnap.forEach(doc => {
        // Filtrar el documento especial de historial de abonos
        if (doc.id !== 'historial_abonos') {
            todasCuentasEnCuaderno.push({ id: doc.id, ...doc.data() });
        }
    });
    
    // console.log('TODAS las cuentas En cuaderno encontradas:', todasCuentasEnCuaderno.length);

    // 4. Calcular totales
    let totalTabaco = 0;
    let totalNoCobradas = 0;
    let cuentasEnCuaderno = []; // Cambio: array en lugar de total
    let totalCuentasCerradas = 0;
    let tipoVenta = { efectivo: 0, nequi: 0, daviplata: 0 };

    // 4. Procesar ventas cerradas y separar abonos
    let totalAbonos = 0;
    let totalVentasCompletas = 0;
    let detalleAbonos = [];
    
    // Validar que cuentasCerradas sea un array
    if (!Array.isArray(cuentasCerradas)) {
        console.warn('cuentasCerradas no es un array:', cuentasCerradas);
        cuentasCerradas = [];
    }
    
    for (const venta of cuentasCerradas) {
        totalCuentasCerradas += venta.total || 0;
        const medioPago = venta.tipoVenta?.toLowerCase();
            if (medioPago === 'daviplata' || medioPago === 'daviplat') { // Acepta ambas formas
                tipoVenta.daviplata += venta.total || 0;
}           else if (medioPago && tipoVenta[medioPago] !== undefined) {
                tipoVenta[medioPago] += venta.total || 0;
}        
        // Separar abonos de ventas completas
        if (venta.esAbono) {
            totalAbonos += venta.total || 0;
            detalleAbonos.push({
                cliente: venta.cliente,
                monto: venta.total || 0,
                medioPago: venta.tipoVenta,
                fecha: venta.fechaCierre,
                saldoOriginal: venta.saldoOriginal,
                saldoRestante: venta.saldoRestante
            });
        } else {
            totalVentasCompletas += venta.total || 0;
        }

        // Tabaco: filtrar por productos específicos de tabaco
        if (venta.productos && Array.isArray(venta.productos)) {
            for (const prod of venta.productos) {
                const nombreProducto = (prod.nombreProducto || '').toLowerCase().trim();
                
                // Normalizar espacios múltiples a uno solo
                const nombreNormalizado = nombreProducto.replace(/\s+/g, ' ');
                
                const esTabaco = nombreNormalizado.includes('rothman azul media') ||
                               nombreNormalizado.includes('rothman azul unidad') ||
                               nombreNormalizado.includes('rothman blanco media') ||
                               nombreNormalizado.includes('rothman blanco unidad') ||
                               nombreNormalizado.includes('l&m media') ||
                               nombreNormalizado.includes('l&m unidad') ||
                               nombreNormalizado.includes('lucky media') ||
                               nombreNormalizado.includes('lucky unidad') ||
                               nombreNormalizado.includes('malboro media') ||
                               nombreNormalizado.includes('malboro unidad');
                
                if (esTabaco) {
                    // Intentar diferentes campos para el precio y cantidad
                    const precio = prod.precioVenta || prod.precio || 0;
                    const cantidad = prod.cantidad || 1;
                    const total = prod.total || (precio * cantidad);
                    
                    totalTabaco += total;
                }
            }
        }
    }

    // 5. Procesar cuentas activas DEL TURNO (para consumo en local)
    if (!Array.isArray(cuentasActivasDelTurno)) {
        console.warn('cuentasActivasDelTurno no es un array:', cuentasActivasDelTurno);
        cuentasActivasDelTurno = [];
    }
    
    for (const cuenta of cuentasActivasDelTurno) {
        // console.log('Procesando cuenta del turno:', cuenta.cliente || cuenta.id, 'Tipo:', cuenta.tipo, 'Total:', cuenta.total);
        
        if (cuenta.tipo === 'Consumo en el local') {
            totalNoCobradas += cuenta.total || 0;
        }
    }
    
    // 6. Procesar TODAS las cuentas "En cuaderno" (independiente del turno)
    if (!Array.isArray(todasCuentasEnCuaderno)) {
        console.warn('todasCuentasEnCuaderno no es un array:', todasCuentasEnCuaderno);
        todasCuentasEnCuaderno = [];
    }
    
    for (const cuenta of todasCuentasEnCuaderno) {
        // console.log('Procesando cuenta En cuaderno:', cuenta.cliente || cuenta.id, 'Turno:', cuenta.turno, 'Total:', cuenta.total);
        
        // Recopilar detalles de cada cuenta en cuaderno
        const cuentaDetalle = {
            cliente: cuenta.cliente || cuenta.id || 'Cliente sin nombre',
            fechaCreacion: formatearFechaAbreviada(cuenta.fechaCreacion || cuenta.timestamp || cuenta.fecha),
            fechaModificacion: formatearFechaAbreviada(cuenta.fechaModificacion || cuenta.ultimaModificacion || cuenta.timestamp || cuenta.fecha),
            total: cuenta.total || 0,
            turno: cuenta.turno || 'Sin turno'
        };
        
        // console.log('Detalle de cuenta agregado:', cuentaDetalle);
        cuentasEnCuaderno.push(cuentaDetalle);
    }
    
    // console.log('Total cuentas En cuaderno encontradas:', cuentasEnCuaderno.length);
    // console.log('Array cuentasEnCuaderno:', cuentasEnCuaderno);

    // 7. Calcular pago de turno
    const pagoTurno = Math.round(totalCuentasCerradas * 0.10 + 7000);

    // console.log('=== RESUMEN FINAL ===');
    // console.log('Total tabaco:', totalTabaco);
    // console.log('Total no cobradas:', totalNoCobradas);
    // console.log('Cuentas en cuaderno:', cuentasEnCuaderno.length);
    // console.log('Total cuentas cerradas:', totalCuentasCerradas);

    return {
        totalTabaco,
        totalNoCobradas,
        cuentasEnCuaderno, // Cambio: array en lugar de total
        totalCuentasCerradas,
        totalAbonos,
        totalVentasCompletas,
        detalleAbonos,
        tipoVenta,
        pagoTurno
    };
}

/**
 * Renderiza el resumen en el container indicado
 * @param {Object} resumen
 * @param {string} containerId
 */
export function renderizarResumenTurno(resumen, containerId) {
    const c = document.getElementById(containerId);
    if (!c) return;
    
    // console.log('Renderizando resumen con:', resumen);
    // console.log('Cuentas en cuaderno recibidas:', resumen.cuentasEnCuaderno);
    
    // Calcular total de cuentas en cuaderno
    const totalEnCuaderno = resumen.cuentasEnCuaderno.reduce((sum, cuenta) => sum + cuenta.total, 0);
    // console.log('Total calculado En cuaderno:', totalEnCuaderno);
    
    // Generar listado de cuentas en cuaderno
    let listadoCuentasEnCuaderno = '';
    if (resumen.cuentasEnCuaderno.length > 0) {
        // console.log('Generando listado para', resumen.cuentasEnCuaderno.length, 'cuentas');
        
        const listItems = resumen.cuentasEnCuaderno.map(cuenta => {
            // console.log('Generando item para:', cuenta);
            return `<li class="small text-muted mt-1">
                👤 <strong>${cuenta.cliente}</strong> 
                <span class="badge bg-secondary ms-1">${cuenta.turno}</span><br>
                📅 ${cuenta.fechaCreacion} → ⏰ ${cuenta.fechaModificacion}<br>
                💰 <span class="text-dark fw-bold">${formatearPrecio(cuenta.total)}</span>
            </li>`;
        }).join('');
        
        listadoCuentasEnCuaderno = `
            <details class="mt-2">
                <summary class="resumen-summary-clickable">
                    Ver detalles (${resumen.cuentasEnCuaderno.length} cuenta${resumen.cuentasEnCuaderno.length !== 1 ? 's' : ''})
                </summary>
                <ul class="list-unstyled mt-2 ms-3">${listItems}</ul>
            </details>
        `;
        
        // console.log('HTML generado para listado:', listadoCuentasEnCuaderno);
    } else {
        // console.log('No hay cuentas En cuaderno para mostrar');
    }
    
    c.innerHTML = `
        <!-- Encabezado principal con información clara -->
        <div class="alert alert-primary text-center mb-4">
            <h3 class="mb-2">📊 Resumen de Tu Turno</h3>
            <p class="mb-0">Así terminaste tu día de trabajo</p>
        </div>

        <!-- SECCIÓN 1: LO MÁS IMPORTANTE - DINERO RECIBIDO -->
        <div class="card mb-4" style="border: 3px solid #28a745;">
            <div class="card-header text-dark text-center" style="background-color: #f8f9fa !important;">
                <h4 class="mb-0">💰 DINERO QUE RECIBISTE HOY</h4>
            </div>
            <div class="card-body">
                <!-- DISEÑO RESPONSIVE: En móvil se apilan, en desktop se mantienen en línea -->
                <div class="row text-center g-3">
                    <div class="col-12 col-md-4">
                        <div class="p-3 rounded" style="background-color: #ffffff !important; border: 1px solid #dee2e6 !important;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <span style="font-size: 2rem;">💵</span>
                                <h5 class="text-dark mb-0 ms-2">Efectivo</h5>
                            </div>
                            <h3 class="text-dark mb-0 fw-bold">${formatearPrecio(resumen.tipoVenta.efectivo)}</h3>
                        </div>
                    </div>
                    <div class="col-12 col-md-4">
                        <div class="p-3 rounded" style="background-color: #ffffff !important; border: 1px solid #dee2e6 !important;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <span style="font-size: 2rem;">📱</span>
                                <h5 class="text-info mb-0 ms-2">Nequi</h5>
                            </div>
                            <h3 class="text-info mb-0 fw-bold">${formatearPrecio(resumen.tipoVenta.nequi)}</h3>
                        </div>
                    </div>
                    <div class="col-12 col-md-4">
                        <div class="p-3 rounded" style="background-color: #ffffff !important; border: 1px solid #dee2e6 !important;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <span style="font-size: 2rem;">💳</span>
                                <h5 class="text-warning mb-0 ms-2">Daviplata</h5>
                            </div>
                            <h3 class="text-warning mb-0 fw-bold">${formatearPrecio(resumen.tipoVenta.daviplata)}</h3>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="text-center">
                    <h3 class="text-dark mb-0">
                        <strong>TOTAL RECIBIDO: ${formatearPrecio(resumen.totalCuentasCerradas)}</strong>
                    </h3>
                    ${resumen.totalAbonos > 0 ? `
                        <div class="mt-2">
                            <small class="text-muted">Incluye:</small><br>
                            <span class="badge bg-primary me-2">💰 Ventas completas: ${formatearPrecio(resumen.totalVentasCompletas)}</span>
                            <span class="badge bg-info">📋 Abonos parciales: ${formatearPrecio(resumen.totalAbonos)}</span>
                        </div>
                    ` : ''}
                </div>
            </div>
        </div>

        ${resumen.totalAbonos > 0 ? `
        <!-- SECCIÓN ESPECIAL: ABONOS RECIBIDOS -->
        <div class="card mb-4" style="border: 2px solid #17a2b8;">
            <div class="card-header text-white text-center" style="background-color: #17a2b8 !important;">
                <h4 class="mb-0">📋 ABONOS PARCIALES RECIBIDOS</h4>
            </div>
            <div class="card-body">
                <div class="text-center mb-3">
                    <h4 class="text-info mb-0">Total en abonos: ${formatearPrecio(resumen.totalAbonos)}</h4>
                    <small class="text-muted">${resumen.detalleAbonos.length} abono${resumen.detalleAbonos.length !== 1 ? 's' : ''} procesado${resumen.detalleAbonos.length !== 1 ? 's' : ''}</small>
                </div>
                <details class="mt-2">
                    <summary class="resumen-summary-clickable">
                        Ver detalles de abonos (${resumen.detalleAbonos.length})
                    </summary>
                    <div class="mt-3">
                        ${resumen.detalleAbonos.map(abono => `
                            <div class="border-start border-info border-3 ps-3 mb-2">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <strong>👤 ${abono.cliente}</strong><br>
                                        <small class="text-muted">
                                            📅 ${formatearFechaAbreviada(abono.fecha)}<br>
                                            💳 ${abono.medioPago}<br>
                                            💰 Saldo original: ${formatearPrecio(abono.saldoOriginal)}<br>
                                            💸 Saldo restante: ${formatearPrecio(abono.saldoRestante)}
                                        </small>
                                    </div>
                                    <div class="text-end">
                                        <h5 class="text-info mb-0">${formatearPrecio(abono.monto)}</h5>
                                        <small class="text-success">✅ Abono</small>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </details>
            </div>
        </div>
        ` : ''}

        <!-- SECCIÓN 2: DINERO PENDIENTE DE COBRAR -->
        <div class="card mb-4" style="border: 2px solid #ffc107;">
            <div class="card-header text-dark text-center" style="background-color: #fff3cd !important;">
                <h4 class="mb-0">⏳ DINERO QUE AÚN NO HAS COBRADO</h4>
            </div>
            <div class="card-body">
                <!-- DISEÑO RESPONSIVE: En móvil se apilan, en desktop lado a lado -->
                <div class="row g-3">
                    <div class="col-12 col-md-6">
                        <div class="text-center p-3 rounded shadow-sm h-100" style="background-color: #ffffff !important; border: 1px solid #dee2e6 !important;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <span style="font-size: 2rem;">🍺</span>
                                <div class="ms-2 text-start">
                                    <h6 class="mb-0">Mesas que consumieron</h6>
                                    <small class="text-muted">(aún no han pagado)</small>
                                </div>
                            </div>
                            <h3 class="text-warning mb-0 fw-bold">${formatearPrecio(resumen.totalNoCobradas)}</h3>
                        </div>
                    </div>
                    <div class="col-12 col-md-6">
                        <div class="text-center p-3 rounded shadow-sm h-100" style="background-color: #ffffff !important; border: 1px solid #dee2e6 !important;">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <span style="font-size: 2rem;">📝</span>
                                <div class="ms-2 text-start">
                                    <h6 class="mb-0">Cuentas del cuaderno</h6>
                                    <small class="text-muted">(fiadas de otros días)</small>
                                </div>
                            </div>
                            <h3 class="text-warning mb-0 fw-bold">${formatearPrecio(totalEnCuaderno)}</h3>
                            ${listadoCuentasEnCuaderno}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- SECCIÓN 3: OTROS PRODUCTOS -->
        <div class="card mb-4">
            <div class="card-header text-white text-center" style="background-color: #6c757d !important;">
                <h5 class="mb-0">🚬 Otros productos vendidos</h5>
            </div>
            <div class="card-body text-center">
                <h6>Cigarrillos</h6>
                <h4 class="text-secondary">${formatearPrecio(resumen.totalTabaco)}</h4>
                <small class="text-muted">Este dinero ya está incluido en el total recibido</small>
            </div>
        </div>

        <!-- SECCIÓN 4: TU PAGO -->
        <div class="card" style="border: 3px solid #007bff;">
            <div class="card-header text-white text-center" style="background-color: #0d6efd !important;">
                <h4 class="mb-0">💵 TU PAGO DE HOY</h4>
            </div>
            <div class="card-body text-center">
                <h6 class="text-muted">10% de ventas cobradas + $7.000 de aseo</h6>
                <h2 class="text-primary">
                    <strong>${formatearPrecio(resumen.pagoTurno)}</strong>
                </h2>
                <small class="text-muted">Este es el dinero que te corresponde por tu trabajo de hoy</small>
            </div>
        </div>
    `;
}




SweetAlertManager.js

// JavaScript/SweetAlertManager.js
// Módulo centralizado para manejo de SweetAlert2 y supresión de errores

import Swal from "https://cdn.jsdelivr.net/npm/sweetalert2@11.10.5/+esm";

/**
 * Configuración inicial - MODO DIAGNÓSTICO
 */
function configurarSweetAlert() {
    // console.log('🔵 SweetAlertManager: Configurando en modo diagnóstico');
    
    // TEMPORALMENTE: Solo interceptar addEventListener problemático
    const originalAddEventListener = window.addEventListener;
    window.addEventListener = function(type, listener, options) {
        if (type === 'unload' || type === 'beforeunload') {
            // console.log('🟡 SweetAlertManager: Bloqueando evento', type);
            return; // Bloquear solo estos eventos problemáticos
        }
        return originalAddEventListener.call(this, type, listener, options);
    };
    
    // console.log('✅ SweetAlertManager: Configuración completada');
}

// Ejecutar configuración inmediatamente
configurarSweetAlert();

/**
 * Muestra un modal de carga
 * @param {string} mensaje - Mensaje a mostrar durante la carga
 */
export function mostrarCargando(mensaje = 'Cargando...') {
    return Swal.fire({
        title: mensaje,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
}

/**
 * Muestra un modal de éxito
 * @param {string} titulo - Título del modal
 * @param {string} mensaje - Mensaje del modal
 */
export function mostrarExito(titulo, mensaje = '') {
    return Swal.fire({
        icon: 'success',
        title: titulo,
        text: mensaje,
        confirmButtonColor: '#28a745'
    });
}

/**
 * Muestra un modal de error
 * @param {string} titulo - Título del modal
 * @param {string} mensaje - Mensaje del modal
 */
export function mostrarError(titulo, mensaje = '') {
    return Swal.fire({
        icon: 'error',
        title: titulo,
        text: mensaje,
        confirmButtonColor: '#dc3545'
    });
}

/**
 * Muestra un modal de advertencia
 * @param {string} titulo - Título del modal
 * @param {string} mensaje - Mensaje del modal
 */
export function mostrarAdvertencia(titulo, mensaje = '') {
    return Swal.fire({
        icon: 'warning',
        title: titulo,
        text: mensaje,
        confirmButtonColor: '#ffc107'
    });
}

/**
 * Muestra un modal de información
 * @param {string} titulo - Título del modal
 * @param {string} mensaje - Mensaje del modal
 */
export function mostrarInfo(titulo, mensaje = '') {
    return Swal.fire({
        icon: 'info',
        title: titulo,
        text: mensaje,
        confirmButtonColor: '#17a2b8'
    });
}

/**
 * Muestra un modal de confirmación
 * @param {string} titulo - Título del modal
 * @param {string} mensaje - Mensaje del modal
 * @param {string} textoConfirmar - Texto del botón confirmar
 * @param {string} textoCancelar - Texto del botón cancelar
 */
export function mostrarConfirmacion(titulo, mensaje = '', textoConfirmar = 'Sí', textoCancelar = 'No') {
    return Swal.fire({
        icon: 'question',
        title: titulo,
        text: mensaje,
        showCancelButton: true,
        confirmButtonText: textoConfirmar,
        cancelButtonText: textoCancelar,
        confirmButtonColor: '#007bff',
        cancelButtonColor: '#6c757d'
    });
}

/**
 * Muestra un modal con input de texto
 * @param {string} titulo - Título del modal
 * @param {string} placeholder - Placeholder del input
 * @param {string} valorInicial - Valor inicial del input
 */
export function mostrarInput(titulo, placeholder = '', valorInicial = '') {
    return Swal.fire({
        title: titulo,
        input: 'text',
        inputPlaceholder: placeholder,
        inputValue: valorInicial,
        showCancelButton: true,
        confirmButtonText: 'Aceptar',
        cancelButtonText: 'Cancelar',
        confirmButtonColor: '#007bff',
        cancelButtonColor: '#6c757d',
        inputValidator: (value) => {
            if (!value) {
                return 'Este campo es requerido';
            }
        }
    });
}

/**
 * Muestra un modal con input NUMÉRICO optimizado para móviles
 * @param {string} titulo - Título del modal
 * @param {string} placeholder - Placeholder del input
 */
export function mostrarInputNumerico(titulo, placeholder = 'Ingrese un número') {
    return Swal.fire({
        title: titulo,
        html: `
            <input 
                type="number" 
                id="swal-numeric-input" 
                class="swal2-input" 
                placeholder="${placeholder}"
                inputmode="numeric"
                pattern="[0-9]*"
                min="1"
                max="99"
                style="font-size: 1.5rem; text-align: center; padding: 15px; -webkit-appearance: none; -moz-appearance: textfield;"
                autofocus
                autocomplete="off"
                enterkeyhint="done"
            >
        `,
        showCancelButton: true,
        confirmButtonText: 'Aceptar',
        cancelButtonText: 'Cancelar',
        confirmButtonColor: '#007bff',
        cancelButtonColor: '#6c757d',
        focusConfirm: false,
        didOpen: () => {
            // Enfocar el input y seleccionar todo el contenido (si lo hay) para móviles
            const input = document.getElementById('swal-numeric-input');
            if (input) {
                // Delay pequeño para asegurar que se renderice completamente
                setTimeout(() => {
                    input.focus();
                    input.select(); // Selecciona cualquier contenido existente
                }, 100);
            }
        },
        preConfirm: () => {
            const input = document.getElementById('swal-numeric-input');
            const value = input.value.trim();
            
            if (!value || isNaN(value) || parseInt(value) < 1) {
                Swal.showValidationMessage('Ingrese un número válido mayor a 0');
                return false;
            }
            
            return parseInt(value);
        }
    });
}

/**
 * Muestra un formulario de venta con opciones de cliente y clase de venta
 */
export function mostrarFormularioVenta() {
    return Swal.fire({
        title: 'Finalizar Venta',
        html: `
            <div style="padding: 10px 0;">
                <input id="swal-input-cliente" 
                       class="swal2-input" 
                       placeholder="Nombre del Cliente (opcional)"
                       style="margin-bottom: 15px;">
                <select id="swal-select-clase-venta" 
                        class="swal2-select"
                        style="margin-bottom: 10px;">
                    <option value="Pago en efectivo">Pago en efectivo</option>
                    <option value="Consumo en el local" selected>Consumo en el local</option>
                    <option value="En cuaderno">En cuaderno</option>
                </select>
            </div>
        `,
        focusConfirm: false,
        width: '90%',
        padding: '20px',
        preConfirm: () => {
            const claseVenta = document.getElementById('swal-select-clase-venta').value;
            const cliente = document.getElementById('swal-input-cliente').value.trim();

            // console.log('🔍 [FORMULARIO VENTA] - Valores capturados:');
            // console.log('   👤 Cliente:', cliente);
            // console.log('   📝 Clase de Venta:', claseVenta);
            // console.log('   🎯 Select element value:', document.getElementById('swal-select-clase-venta').value);
            // console.log('   🎯 Select element selectedIndex:', document.getElementById('swal-select-clase-venta').selectedIndex);

            if ((claseVenta === 'En cuaderno' || claseVenta === 'Consumo en el local') && !cliente) {
                Swal.showValidationMessage('El nombre del cliente es obligatorio para esta opción');
                return false;
            }
            
            // console.log('✅ [FORMULARIO VENTA] - Datos válidos, retornando:', { cliente, claseVenta });
            return { cliente, claseVenta };
        },
        confirmButtonText: 'Confirmar Venta',
        showCancelButton: true,
        cancelButtonText: 'Cancelar'
    });
}

/**
 * Muestra un modal personalizado con las opciones específicas
 * @param {Object} options - Opciones del modal personalizado
 */
export function mostrarPersonalizado(options) {
    return Swal.fire(options);
}

/**
 * Muestra un modal con select
 * @param {string} titulo - Título del modal
 * @param {Object} opciones - Objeto con opciones {value: 'text'}
 * @param {string} valorInicial - Valor inicial seleccionado
 */
export function mostrarSelect(titulo, opciones, valorInicial = '') {
    return Swal.fire({
        title: titulo,
        input: 'select',
        inputOptions: opciones,
        inputValue: valorInicial,
        showCancelButton: true,
        confirmButtonText: 'Aceptar',
        cancelButtonText: 'Cancelar',
        confirmButtonColor: '#007bff',
        cancelButtonColor: '#6c757d'
    });
}

/**
 * Muestra un modal específico para medios de pago
 * @param {number} total - Total de la venta
 * @param {string} htmlContent - HTML de los botones de pago
 */
export function mostrarMedioPago(total, htmlContent) {
    return Swal.fire({
        title: 'Seleccionar Medio de Pago',
        html: htmlContent,
        showConfirmButton: false,
        showCancelButton: true,
        cancelButtonText: 'Cancelar',
        allowOutsideClick: false
    });
}

/**
 * Muestra validación específica
 * @param {string} mensaje - Mensaje de validación
 */
export function mostrarValidacion(mensaje) {
    Swal.showValidationMessage(mensaje);
}

/**
 * Cierra cualquier modal abierto
 */
export function cerrarModal() {
    Swal.close();
}

/**
 * Muestra loading en modal abierto
 */
export function mostrarLoading() {
    Swal.showLoading();
}

/**
 * Oculta loading en modal abierto
 */
export function ocultarLoading() {
    Swal.hideLoading();
}

/**
 * Función de logging para desarrollo
 * @param {string} mensaje - Mensaje a logear
 * @param {string} tipo - Tipo de log (info, warn, error)
 */
export function log(mensaje, tipo = 'info') {
    if (tipo === 'error') {
        console.error(`🔴 SweetAlertManager: ${mensaje}`);
    } else if (tipo === 'warn') {
        console.warn(`🟡 SweetAlertManager: ${mensaje}`);
    } else {
        // console.log(`🔵 SweetAlertManager: ${mensaje}`);
    }
}

/**
 * Muestra modal para procesar abono parcial
 * @param {string} clienteNombre - Nombre del cliente
 * @param {number} saldoActual - Saldo actual de la cuenta
 * @returns {Promise<{monto: number, medioPago: string} | null>}
 */
export async function mostrarModalAbono(clienteNombre, saldoActual) {
    const { value: formValues } = await Swal.fire({
        title: `💰 Abono Parcial`,
        html: `
            <div class="text-start">
                <div class="mb-3 p-3 bg-light rounded">
                    <h6 class="mb-1">Cliente: <strong>${clienteNombre}</strong></h6>
                    <h6 class="mb-0 text-primary">Saldo actual: <strong>$${saldoActual.toLocaleString('es-CO')}</strong></h6>
                </div>
                
                <div class="mb-3">
                    <label for="swal-monto-abono" class="form-label">Monto del abono:</label>
                    <input type="number" 
                           id="swal-monto-abono" 
                           class="form-control" 
                           placeholder="Ingrese el monto"
                           min="1" 
                           max="${saldoActual}"
                           inputmode="numeric">
                    <div class="form-text">Máximo: $${saldoActual.toLocaleString('es-CO')}</div>
                </div>
                
                <div class="mb-3">
                    <label for="swal-medio-pago" class="form-label">Medio de pago:</label>
                    <select id="swal-medio-pago" class="form-select">
                        <option value="">Seleccione el medio de pago</option>
                        <option value="Efectivo">💵 Efectivo</option>
                        <option value="Nequi">📱 Nequi</option>
                        <option value="Daviplata">💳 Daviplata</option>
                    </select>
                </div>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: '💰 Procesar Abono',
        cancelButtonText: '❌ Cancelar',
        confirmButtonColor: '#28a745',
        cancelButtonColor: '#dc3545',
        focusConfirm: false,
        width: '500px',
        preConfirm: () => {
            const monto = parseFloat(document.getElementById('swal-monto-abono').value);
            const medioPago = document.getElementById('swal-medio-pago').value;
            
            // Validaciones
            if (!monto || monto <= 0) {
                Swal.showValidationMessage('Debe ingresar un monto válido');
                return false;
            }
            
            if (monto > saldoActual) {
                Swal.showValidationMessage(`El abono no puede ser mayor al saldo actual ($${saldoActual.toLocaleString('es-CO')})`);
                return false;
            }
            
            if (!medioPago) {
                Swal.showValidationMessage('Debe seleccionar un medio de pago');
                return false;
            }
            
            return { monto, medioPago };
        }
    });
    
    return formValues || null;
}

/**
 * Muestra modal con la lista de clientes que tienen abonos
 * @param {Array} clientesConAbonos - Array de clientes con historial de abonos
 */
export async function mostrarModalClientesConAbonos(clientesConAbonos) {
    if (clientesConAbonos.length === 0) {
        return mostrarInfo('Sin historial', 'No hay clientes con historial de abonos');
    }

    const listaClientes = clientesConAbonos.map(cliente => `
        <div class="cliente-abono-item" onclick="window.verHistorialCliente('${cliente.id}', '${cliente.nombre}')" 
             style="cursor: pointer; padding: 12px; margin: 8px 0; border: 1px solid #ddd; border-radius: 8px; background: #f8f9fa; transition: all 0.2s;">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h6 class="mb-1 text-primary">${cliente.nombre}</h6>
                    <small class="text-muted">
                        ${cliente.totalAbonos} abono(s) • Último: ${cliente.ultimoAbono.fecha}
                    </small>
                </div>
                <div class="text-success fw-bold">
                    ${cliente.ultimoAbono.monto.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}
                </div>
            </div>
        </div>
    `).join('');

    return Swal.fire({
        title: '📊 Historial de Abonos',
        html: `
            <div style="max-height: 400px; overflow-y: auto;">
                <p class="text-muted mb-3">Selecciona un cliente para ver su historial completo:</p>
                ${listaClientes}
            </div>
            <style>
                .cliente-abono-item:hover {
                    background: #e3f2fd !important;
                    border-color: #2196f3 !important;
                    transform: translateY(-1px);
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                }
            </style>
        `,
        confirmButtonText: '✅ Cerrar',
        confirmButtonColor: '#007bff',
        width: '600px'
    });
}

/**
 * Muestra el historial detallado de abonos de un cliente específico
 * @param {Array} abonos - Array de abonos del cliente
 * @param {string} nombreCliente - Nombre del cliente
 */
export async function mostrarModalHistorialCliente(abonos, nombreCliente) {
    // Ordenar abonos del más reciente al más antiguo
    const abonosOrdenados = [...abonos].sort((a, b) => new Date(b.fecha) - new Date(a.fecha));
    
    const totalAbonado = abonos.reduce((sum, abono) => sum + abono.monto, 0);
    
    const listaAbonos = abonosOrdenados.map((abono, index) => `
        <div class="abono-detalle" style="padding: 12px; margin: 8px 0; border-left: 4px solid #28a745; background: #f8f9fa; border-radius: 4px;">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <h6 class="mb-1 text-success">Abono #${abonosOrdenados.length - index}</h6>
                    <div class="small text-muted">
                        <div><strong>📅 Fecha:</strong> ${abono.fecha}</div>
                        <div><strong>💳 Medio:</strong> ${abono.medioPago}</div>
                        <div><strong>🎯 Turno:</strong> ${abono.turno}</div>
                        ${abono.saldoAnterior ? `<div><strong>💰 Saldo anterior:</strong> ${abono.saldoAnterior.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</div>` : ''}
                        ${abono.saldoRestante !== undefined ? `<div><strong>💸 Saldo restante:</strong> ${abono.saldoRestante.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</div>` : ''}
                    </div>
                </div>
                <div class="text-success fw-bold fs-5">
                    ${abono.monto.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}
                </div>
            </div>
        </div>
    `).join('');

    return Swal.fire({
        title: `📈 Historial de ${nombreCliente}`,
        html: `
            <div class="mb-3 p-3 bg-primary text-white rounded">
                <h5 class="mb-0">💎 Total Abonado: ${totalAbonado.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</h5>
                <small>${abonos.length} abono(s) registrado(s)</small>
            </div>
            <div style="max-height: 400px; overflow-y: auto;">
                ${listaAbonos}
            </div>
        `,
        confirmButtonText: '⬅️ Volver a la lista',
        confirmButtonColor: '#007bff',
        width: '700px'
    }).then((result) => {
        if (result.isConfirmed) {
            // Volver a mostrar la lista de clientes
            window.mostrarHistorialAbonosGeneral();
        }
    });
}





VentasApp.js

import {
    getFirestore, doc, getDoc, setDoc, collection,
    query, where, orderBy, limit, getDocs, updateDoc, arrayUnion,
    runTransaction, serverTimestamp
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-firestore.js";
import { app } from "./Conexion.js"; // Se asume que este archivo exporta la app de Firebase inicializada
import { 
    mostrarAdvertencia,
    mostrarFormularioVenta, 
    mostrarCargando, 
    mostrarExito, 
    mostrarError, 
    cerrarModal,
    mostrarValidacion 
} from "./SweetAlertManager.js";
import { mostrarModalMedioPago } from "./Engranaje.js";

const db = getFirestore(app);

/**
 * Procesa una venta de 'Pago en efectivo' directamente a 'cuentasCerradas'.
 * Esta función está adaptada de la lógica de 'cerrarCuenta'.
 * @param {object} carrito - El objeto del carrito de compras.
 * @param {string} medioPago - El medio de pago específico (Efectivo, Nequi, Daviplata).
 */
export async function procesarVentaDirecta(carrito, medioPago) {
    // 1. El medio de pago viene como parámetro desde la selección del usuario

    // 2. Buscar el turno activo para asociar la venta.
    let idTurno = localStorage.getItem("idTurno");
    if (!idTurno) {
        const turnosRef = collection(db, "turnos");
        const q = query(turnosRef, where("estado", "==", "activo"), orderBy("fechaInicio", "desc"), limit(1));
        const snap = await getDocs(q);
        if (!snap.empty) {
            idTurno = snap.docs[0].id;
            localStorage.setItem("idTurno", idTurno);
        }
    }
    if (!idTurno) {
        throw new Error("No se encontró un turno activo. Por favor, inicie un turno para registrar la venta.");
    }
    if (!idTurno) {
        throw new Error("No se encontró un turno activo. Por favor, inicie un turno para registrar la venta.");
    }

    // 3. Preparar el array de productos desde el carrito.
    const productosArray = Object.values(carrito).map(p => ({
        nombreProducto: String(p?.nombre ?? 'sin nombre'),
        precioVenta: Number(p?.precioVenta ?? 0),
        cantidad: Number(p?.cantidad ?? 0)
    }));

    // 4. Calcular el total final de la venta.
    const totalCalculado = Object.values(carrito).reduce((acc, item) => acc + item.total, 0);

    // 5. Construir el objeto de la venta que se va a archivar.
    const horaVenta = new Date().toLocaleTimeString('es-CO', { hour12: false });
    const clienteObj = {
        cliente: 'Cliente Ocasional',
        tipoVenta: medioPago,
        horaVenta,
        total: totalCalculado,
        productos: productosArray,
        turno: idTurno
    };

    if (!clienteObj.productos.length) {
        throw new Error("No hay productos en el carrito para registrar.");
    }

    // 6. Guardar la venta en el documento del turno activo dentro de 'cuentasCerradas'.
    const turnoRef = doc(db, "cuentasCerradas", idTurno);
    const turnoSnap = await getDoc(turnoRef);

    if (!turnoSnap.exists()) {
        await setDoc(turnoRef, { clientes: [clienteObj] });
    } else {
        await updateDoc(turnoRef, { clientes: arrayUnion(clienteObj) });
    }
}


/**
 * Procesa una venta y la agrega a una cuenta en la colección "cuentasActivas".
 * Este flujo se usa para 'Consumo en el local' y 'En cuaderno'.
 * @param {object} carrito - El carrito de compras actual.
 * @param {string} cliente - El nombre del cliente.
 * @param {string} claseVenta - El tipo de venta.
 */
async function procesarVentaCliente(carrito, cliente, claseVenta) {
    // console.log('🔍 [PROCESAR VENTA CLIENTE] - Parámetros recibidos:');
    // console.log('   👤 Cliente:', cliente);
    // console.log('   📋 Clase Venta:', claseVenta);
    // console.log('   🛒 Carrito:', carrito);
    
    const cuentaRef = doc(db, "cuentasActivas", cliente);
    const idTurno = localStorage.getItem("idTurno") || null;
    const fechaActual = new Date();
    const fechaFormateada = fechaActual.toLocaleString('es-CO', { 
        timeZone: 'America/Bogota',
        year: 'numeric', 
        month: '2-digit', 
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });

    await runTransaction(db, async (transaction) => {
        const cuentaDoc = await transaction.get(cuentaRef);
        
        // console.log('🔍 [TRANSACCIÓN] - Estado de la cuenta:');
        // console.log('   🗃️  Cuenta existe:', cuentaDoc.exists());
        // if (cuentaDoc.exists()) {
        //     console.log('   📋 Tipo actual en BD:', cuentaDoc.data().tipo);
        //     console.log('   💰 Total actual:', cuentaDoc.data().total);
        // }
        
        const productosCuenta = cuentaDoc.exists() ? cuentaDoc.data().productos : {};
        const historialCuenta = cuentaDoc.exists() ? cuentaDoc.data().historial || [] : [];
        let totalCuenta = cuentaDoc.exists() ? cuentaDoc.data().total : 0;

        // Crear registro para el historial de esta compra
        const registroHistorial = {
            fecha: fechaFormateada,
            turno: idTurno,
            productos: [],
            subtotal: 0
        };

        for (const idProducto in carrito) {
            const itemCarrito = carrito[idProducto];
            
            // Agregar al historial
            registroHistorial.productos.push({
                nombre: itemCarrito.nombre,
                cantidad: itemCarrito.cantidad,
                precioVenta: itemCarrito.precioVenta,
                total: itemCarrito.total
            });
            registroHistorial.subtotal += itemCarrito.total;

            if (productosCuenta[idProducto]) {
                productosCuenta[idProducto].cantidad += itemCarrito.cantidad;
                productosCuenta[idProducto].total += itemCarrito.total;
                // Actualizar última fecha de pedido
                productosCuenta[idProducto].ultimaFecha = fechaFormateada;
            } else {
                productosCuenta[idProducto] = {
                    ...itemCarrito,
                    primerPedido: fechaFormateada,
                    ultimaFecha: fechaFormateada,
                    // 🔧 Agregar timestamp específico para mantener orden fijo en la lista
                    timestampCreacion: new Date().toISOString()
                };
            }
        }

        // Agregar registro al historial
        historialCuenta.push(registroHistorial);

        totalCuenta += Object.values(carrito).reduce((acc, item) => acc + item.total, 0);

        if (cuentaDoc.exists()) {
            const tipoOriginal = cuentaDoc.data().tipo;
            // console.log('📝 [PROCESAR VENTA CLIENTE] - Actualizando cuenta existente:');
            // console.log('   👤 Cliente:', cliente);
            // console.log('   📋 Tipo original:', tipoOriginal);
            // console.log('   📋 Clase Venta nueva:', claseVenta);
            // console.log('   💰 Total anterior:', cuentaDoc.data().total);
            // console.log('   💰 Total nuevo:', totalCuenta);
            
            // Verificar si necesita actualizar el tipo
            // if (tipoOriginal !== claseVenta) {
            //     console.log('   🔄 ACTUALIZANDO TIPO: de "' + tipoOriginal + '" a "' + claseVenta + '"');
            // } else {
            //     console.log('   ✅ TIPO MANTENIDO: "' + claseVenta + '"');
            // }
            
            transaction.update(cuentaRef, {
                productos: productosCuenta,
                historial: historialCuenta,
                total: totalCuenta,
                tipo: claseVenta, // 🔧 AHORA SÍ ACTUALIZA EL TIPO
                ultimaActualizacion: serverTimestamp(),
                turno: idTurno
            });
        } else {
            // console.log('💾 [PROCESAR VENTA CLIENTE] - Creando nueva cuenta con:');
            // console.log('   👤 Cliente:', cliente);
            // console.log('   📋 Tipo:', claseVenta);
            // console.log('   💰 Total:', totalCuenta);
            
            transaction.set(cuentaRef, {
                cliente: cliente,
                tipo: claseVenta,
                productos: productosCuenta,
                historial: historialCuenta,
                total: totalCuenta,
                fechaApertura: serverTimestamp(),
                turno: idTurno
            });
            
            // console.log('✅ [TRANSACCIÓN] - SET ejecutado para nueva cuenta:', cliente, 'con tipo:', claseVenta);
        }
        
        // console.log('🔄 [TRANSACCIÓN] - Ejecutando runTransaction...');
    }).then(() => {
        // console.log('✅ [TRANSACCIÓN] - runTransaction COMPLETADA exitosamente');
    }).catch((error) => {
        console.error('❌ [TRANSACCIÓN] - runTransaction FALLÓ:', error);
        throw error;
    });
}

/**
 * Función principal que inicia el proceso de venta y decide el flujo a seguir.
 * @param {object} carrito - El objeto del carrito de compras.
 */
export async function realizarVenta(carrito) {
    if (Object.keys(carrito).length === 0) {
        mostrarAdvertencia('No hay productos para vender.');
        return;
    }

    const { value: formValues } = await mostrarFormularioVenta();

    // console.log('🔍 [REALIZAR VENTA] - FormValues recibidos:', formValues);

    if (formValues) {
        // console.log('✅ [REALIZAR VENTA] - Procesando venta con clase:', formValues.claseVenta);
        mostrarCargando('Procesando venta...');

        try {
            if (formValues.claseVenta === 'Pago en efectivo') {
                // console.log('💰 [REALIZAR VENTA] - Flujo: Pago en efectivo');
                cerrarModal(); // Cerrar el loading
                
                const total = Object.values(carrito).reduce((acc, item) => acc + item.total, 0);
                const medioPagoFinal = await mostrarModalMedioPago(total);

                if (!medioPagoFinal) {
                    return; // Usuario canceló
                }

                // Mostrar loading nuevamente
                mostrarCargando(`Procesando pago con ${medioPagoFinal}`);

                // Procesar venta con el medio de pago seleccionado
                await procesarVentaDirecta(carrito, medioPagoFinal);
            } else {
                // FLUJO 2: La venta se guarda en 'cuentasActivas'.
                // console.log('📝 [REALIZAR VENTA] - Flujo: Cuenta de cliente');
                // console.log('   👤 Cliente:', formValues.cliente);
                // console.log('   📋 Clase Venta:', formValues.claseVenta);
                await procesarVentaCliente(carrito, formValues.cliente, formValues.claseVenta);
            }

            window.carrito = {};
            if (window.renderCarrito) window.renderCarrito();
            mostrarExito('La venta ha sido registrada correctamente.');

            // Redirigir a cuentas activas si la función global está disponible
            if (typeof window.mostrarContainer === 'function') {
                window.mostrarContainer('container2');
            }

        } catch (error) {
            mostrarError(`Ocurrió un error al procesar la venta: ${error.message}`);
            // console.error("Error en realizarVenta:", error);
        }
    }
}

/**
 * Procesa una venta de pago en efectivo cuando la caja está cerrada
 * @param {object} carrito - El objeto del carrito de compras.
 * @param {string} medioPago - El medio de pago específico (Efectivo, Nequi, Daviplata).
 */
async function procesarVentaEfectivoACerrada(carrito, medioPago) {
    // Usar la función existente procesarVentaDirecta
    return await procesarVentaDirecta(carrito, medioPago);
}

// ===============================================
// FUNCIONES DE MEJORA PARA MÓVILES ANDROID
// ===============================================

/**
 * Cierra el teclado virtual y quita el foco del campo activo
 */
window.cerrarTeclado = function() {
    const campoActivo = document.activeElement;
    if (campoActivo && (campoActivo.tagName === 'INPUT' || campoActivo.tagName === 'TEXTAREA')) {
        campoActivo.blur();
    }
    
    // Remover clase de campo activo
    document.querySelectorAll('.input-active').forEach(el => {
        el.classList.remove('input-active');
    });
    
    // Quitar clase del body
    document.body.classList.remove('keyboard-active');
    
    // Scroll suave hacia arriba para reorganizar la vista
    setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 100);
};

/**
 * Limpia el contenido del campo de búsqueda
 */
window.limpiarBusqueda = function() {
    const campoBusqueda = document.getElementById('campoBusqueda1');
    if (campoBusqueda) {
        campoBusqueda.value = '';
        campoBusqueda.focus();
        
        // Limpiar resultados de búsqueda
        const resultados = document.getElementById('resultadoBusqueda1');
        if (resultados) {
            resultados.innerHTML = '';
            resultados.classList.add('d-none');
        }
    }
};

/**
 * Configura los event listeners para mejorar la experiencia en móviles
 */
function configurarEventosMobiles() {
    // Detectar cuando se abre/cierra el teclado
    const campoBusqueda = document.getElementById('campoBusqueda1');
    
    if (campoBusqueda) {
        // Cuando el campo recibe foco
        campoBusqueda.addEventListener('focus', function() {
            this.classList.add('input-active');
            document.body.classList.add('keyboard-active');
            
            // Scroll automático para que el campo sea visible
            setTimeout(() => {
                this.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
            }, 300); // Delay para que el teclado aparezca
        });
        
        // Cuando el campo pierde foco
        campoBusqueda.addEventListener('blur', function() {
            this.classList.remove('input-active');
            document.body.classList.remove('keyboard-active');
        });
        
        // Mejorar la experiencia de escritura
        campoBusqueda.addEventListener('input', function() {
            // Esto ayuda a mantener el campo visible mientras se escribe
            if (this.classList.contains('input-active')) {
                setTimeout(() => {
                    this.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                }, 100);
            }
        });
    }
    
    // Detectar cambios en el tamaño de viewport (cuando aparece/desaparece el teclado)
    let lastHeight = window.innerHeight;
    
    window.addEventListener('resize', function() {
        const currentHeight = window.innerHeight;
        const heightDifference = lastHeight - currentHeight;
        
        // Si la altura se reduce significativamente, probablemente apareció el teclado
        if (heightDifference > 150) {
            document.body.classList.add('keyboard-active');
        } 
        // Si la altura aumenta, probablemente se cerró el teclado
        else if (heightDifference < -150) {
            document.body.classList.remove('keyboard-active');
        }
        
        lastHeight = currentHeight;
    });
    
    // Prevenir zoom en doble tap en iOS
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function(event) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            event.preventDefault();
        }
        lastTouchEnd = now;
    }, false);
}

// Inicializar las mejoras para móviles cuando se carga la página
document.addEventListener('DOMContentLoaded', configurarEventosMobiles);




index.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta http-equiv="Permissions-Policy" content="unload=(), camera=(), microphone=(), geolocation=()">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' 'unsafe-eval' https: data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:;">
    <title>Sistema POS - El Arrendajo Azul</title>
    
    <!-- Script de supresión de errores jQuery/Firebase -->
    <script>
        (function() {
            const originalWarn = console.warn;
            const originalInfo = console.info;
            
            console.warn = function(...args) {
                const mensaje = args.join(' ');
                if (mensaje.includes('Permissions policy violation') || 
                    mensaje.includes('unload is not allowed') ||
                    mensaje.includes('jquery.js:1040')) {
                    return; // Suprimir warnings de unload
                }
                originalWarn.apply(console, args);
            };
            
            console.info = function(...args) {
                const mensaje = args.join(' ');
                if (mensaje.includes('The current domain is not authorized for OAuth') ||
                    mensaje.includes('Add your domain (127.0.0.1)') ||
                    mensaje.includes('iframe.js:310')) {
                    return; // Suprimir info de Firebase OAuth para localhost
                }
                originalInfo.apply(console, args);
            };
        })();
    </script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
    <link rel="stylesheet" href="./Css/estilo.css">
    
</head>
<body>
    <!-- Template para modal de medios de pago -->
    <template id="modalMediosPagoTemplate">
        <div class="modal-pago-container">
            <div class="pago-opcion" onclick="window.seleccionarMedioPagoModal('Efectivo')">
                <img src="./pngs/efectivo.png" alt="Efectivo" class="icono-pago-principal">
                <span class="texto-pago">Efectivo</span>
            </div>
            <div class="pago-opcion" onclick="window.seleccionarMedioPagoModal('Nequi')">
                <img src="./pngs/nequi.png" alt="Nequi" class="icono-pago-principal">
                <span class="texto-pago">Nequi</span>
            </div>
            <div class="pago-opcion" onclick="window.seleccionarMedioPagoModal('Daviplata')">
                <img src="./pngs/daviplata.png" alt="DaviPlata" class="icono-pago-principal">
                <span class="texto-pago">DaviPlata</span>
            </div>
        </div>
    </template>

    <div class="containerPendientes d-none" id="containerPendientes">
    
    <!-- Logo del local -->
    <div class="logo-container-pendientes mb-3">
        <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-pendientes" />
    </div>
    
    <h1 class="titulo-superior">📋 Cuentas Pendientes Por Cobrar</h1>
    <div id="cuentasPendientesTurno" class="mt-1 mb-2"></div>
    <div class="d-flex flex-wrap gap-2 mt-3">
        <button onclick="mostrarContainer('container2')" class="btn btn-primary flex-fill">
            ↩️ Ir a INICIO
        </button>
        <button onclick="window.mostrarHistorialAbonosGeneral()" class="btn btn-info flex-fill">
            📊 Historial de Abonos
        </button>
        <!--<button onclick="window.mostrarCuentasPendientes();" class="btn btn-outline-secondary flex-fill">
            🔄 Actualizar Lista
        </button>-->
    </div>
</div>

    <div class="container container-login container-visible" id="container">
    <h1>Inicio de Sesión</h1>
    
    <!-- Logo del local -->
    <div class="logo-container mb-4">
        <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-login" />
    </div>
    
    <button id="loginButton" class="btn-login">Iniciar de sesión</button>
    <div id="loginForm" class="d-none">
        <div class="form-floating mb-3">
            <input type="email" class="form-control" id="emailinicio" placeholder="name@example.com">
            <label for="emailinicio">Tu Correo Electronico</label>
        </div>
        <div class="form-floating mb-3">
            <input type="password" class="form-control" id="passwordinicio" placeholder="Password">
            <label for="passwordinicio">Tu Contraseña</label>
        </div>
        <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="recordarDatos">
        <label class="form-check-label" for="recordarDatos">Recordar datos</label>
    </div>
        <div class="d-flex flex-wrap gap-2">
            <button id="btnIniciarSesion" class="btn btn-primary flex-fill">Siguiente</button>
            <button id="closeButton" class="btn btn-secondary flex-fill">Cerrar</button>
        </div>
    </div>
</div>
    </div>
<div class="container1 d-none" id="container1">
    <h1 class="titulo-superior">Ventas</h1>
    
    <!-- Logo del local -->
    <div class="logo-container-ventas mb-3">
        <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-ventas" />
    </div>
    
    <div class="buscador-container">
        <div class="buscador-header">
            <h5 class="buscador-titulo">🔍 Buscar Productos</h5>
        </div>
        <div class="buscador-input-container">
            <input type="text" id="campoBusqueda1" class="buscador-input" placeholder="🔍 Toca aquí para buscar productos..." readonly style="cursor: pointer;" tabindex="-1">
            <div class="buscador-icon">🔍</div>
        </div>
    </div>
    <div id="resultadoBusqueda1" class="resultado-busqueda d-none" style="display: none !important;"></div>
    <div id="carritoVenta"></div>
    <div class="d-flex justify-content-center">
        <button onclick="mostrarContainer('container2')" class="btn btn-primary">
            📋 Ir a INICIO
        </button>
    </div>
</div>
</div>
<div class="container2 d-none" id="container2">
    <!-- Logo del local -->
    <div class="logo-container-main mb-3">
        <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-main" />
    </div>
    
    <h2 class="titulo-superior">INICIO</h2>
    <h1 class="titulo-superior">Cigarreria y Algo Mas El Arrendajo Azul</h1>
    <h3 class="titulo-superior">Cuentas En Turno</h3>
    <div id="cuentasActivasTurno" class="mt-1 mb-2"></div>
    <div class="d-flex flex-wrap gap-2">
        <button onclick="mostrarContainer('container1')" class="btn btn-success flex-fill">
            🛒 Hacer Venta
        </button>
        <button onclick="mostrarContainer('containerResumenTurno')" class="btn btn-info flex-fill">
            📊 Ver Resumen del Dia
        </button>
    </div>
</div>
</div>

<div class="containerResumenTurno d-none" id="containerResumenTurno">
            <!-- Logo del local -->
        <div class="logo-container-resumen mb-3">
            <img src="./pngs/LogoLocal.png" alt="Logo El Arrendajo Azul" class="logo-resumen" />
        </div>

    <h1 class="titulo-superior">📊 Resumen del Turno</h1>
    <div id="resumenTurnoContent" class="mt-3 mb-3"></div>
    <div class="d-flex flex-wrap gap-2">
        <button onclick="mostrarContainer('container2')" class="btn btn-primary flex-fill">
            ↩️ Volver a INICIO
        </button>
        <button onclick="cerrarSesion()" class="btn btn-danger flex-fill">
            🚪 Cerrar sesión
        </button>
    </div>
</div>
<div class="container3 d-none" id="container3">
    <div id="detalleCuentaContainer"></div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script type="module" src="JavaScript/Engranaje.js"></script>
    <script type="module" src="JavaScript/Cuentas.js"></script>
</body>
</html>